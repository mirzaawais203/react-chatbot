{"version":3,"sources":["../../source/react-hook-form/ReactHookFormInput.js"],"names":["React","useRef","useCallback","useImperativeHandle","Controller","PropTypes","ReactHookFormInput","ref","Component","name","defaultValue","shouldUnregister","control","rules","onChange_","onChange","onBlur_","onBlur","rest","internalRef","setRef","instance","current","undefined","renderInputComponent","restReactHookFormControlledFieldProps","focus","setComponentRef","onChangeCombined","value","onBlurCombined","event","onFocus","props","field","forwardRef","propTypes","elementType","isRequired","string","bool","object","func"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback, useImperativeHandle } from 'react'\nimport { Controller } from 'react-hook-form'\nimport PropTypes from 'prop-types'\n\nlet ReactHookFormInput = ({\n  Component,\n  name,\n  defaultValue,\n  shouldUnregister,\n  control,\n  rules,\n  onChange: onChange_,\n  onBlur: onBlur_,\n  ...rest\n}, ref) => {\n  const internalRef = useRef()\n\n  const setRef = useCallback((instance) => {\n    internalRef.current = instance\n    if (ref) {\n      if (typeof ref === 'function') {\n        ref(instance)\n      } else {\n        ref.current = instance\n      }\n    }\n  }, [ref])\n\n  // `feact-hook-form` doesn't know how to properly handle `undefined` values.\n  // https://github.com/react-hook-form/react-hook-form/issues/2990\n  defaultValue = defaultValue === undefined ? null : defaultValue\n\n  const renderInputComponent = ({\n    ref,\n    onChange,\n    onBlur,\n    // `restReactHookFormControlledFieldProps` contain properties like `name` and `value`.\n    // https://github.com/react-hook-form/react-hook-form/blob/b0e6c3057ac12a7b12d5616aecf3791acb7d7204/src/types/controller.ts#L21-L30\n    ...restReactHookFormControlledFieldProps\n  }) => {\n    // Setting `ref` passed by `react-hook-form` results in a bug:\n    // when an initial value is defined (example: \"+78005553535\")\n    // it seems to be set directly on the `ref`d `<input/>`\n    // by `react-hook-form` and the result is a non-formatted\n    // \"+78005553535\" initial value in the `<input/>`.\n    //\n    // To work around that bug, a fake `ref` is assigned,\n    // so that it could only `.focus()` it and no more.\n    //\n    // `useImperativeHandle()` hook seems to allow `ref` being `undefined`.\n    //\n    // if (ref) {\n      useImperativeHandle(ref, () => ({\n        focus() {\n          internalRef.current.focus()\n        }\n      }))\n    // }\n\n    const setComponentRef = useCallback((instance) => {\n      setRef(instance)\n      // if (ref) {\n      //   if (typeof ref === 'function') {\n      //     ref(instance)\n      //   } else {\n      //     ref.current = instance\n      //   }\n      // }\n    }, [ref, setRef])\n\n    const onChangeCombined = useCallback((value) => {\n      onChange(value)\n      if (onChange_) {\n        onChange_(value)\n      }\n    }, [\n      onChange,\n      onChange_\n    ])\n\n    const onBlurCombined = useCallback((event) => {\n      onBlur(event)\n      if (onBlur_) {\n        onBlur_(event)\n      }\n    }, [\n      onBlur,\n      onBlur_\n    ])\n\n    return (\n      <Component\n        {...rest}\n        {...restReactHookFormControlledFieldProps}\n        ref={setComponentRef}\n        onChange={onChangeCombined}\n        onBlur={onBlurCombined}/>\n    )\n  }\n\n  // `react-hook-form@7` no longer accepts `onFocus` property.\n  // Since this component can be used with both `v6` and `v7`,\n  // the `onFocus` property is left here.\n  const onFocus = useCallback(() => {\n    // internalRef.current.disabled = false\n    internalRef.current.focus()\n  }, [])\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      defaultValue={defaultValue}\n      shouldUnregister={shouldUnregister}\n      rules={rules}\n      onFocus={onFocus}\n      render={(props) => {\n        // Differentiate between `react-hook-form@6` and `react-hook-form@7`.\n        // https://react-hook-form.com/migrate-v6-to-v7/\n        // https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/57\n        // `props` (before v7) and `props.fields` (in v7) contain properties like:\n        // `ref`, `name`, `value`, `onChange`, `onBlur`.\n        // https://github.com/react-hook-form/react-hook-form/blob/b0e6c3057ac12a7b12d5616aecf3791acb7d7204/src/types/controller.ts#L21-L30\n        return renderInputComponent(props.field || props)\n      }}/>\n  )\n}\n\nReactHookFormInput = React.forwardRef(ReactHookFormInput)\n\nReactHookFormInput.propTypes = {\n  Component: PropTypes.elementType.isRequired,\n  name: PropTypes.string.isRequired,\n  defaultValue: PropTypes.string,\n  // A quote from `react-hook-form`:\n  // Without `shouldUnregister: true`, an input value would be retained when input is removed.\n  // Setting `shouldUnregister: true` makes the form behave more closer to native.\n  shouldUnregister: PropTypes.bool,\n  control: PropTypes.object.isRequired,\n  rules: PropTypes.object,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func\n}\n\nexport default ReactHookFormInput"],"file":"ReactHookFormInput.js"}