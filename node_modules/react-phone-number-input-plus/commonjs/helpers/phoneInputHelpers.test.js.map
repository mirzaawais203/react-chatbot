{"version":3,"sources":["../../source/helpers/phoneInputHelpers.test.js"],"names":["describe","it","value","phoneNumber","countries","getAnyCountry","required","metadata","should","equal","expect","to","be","undefined","defaultCountry","country","phone","defaultLabels","countryNames","deep","label","addInternationalOption","ZZ","compareStrings","a","b","nationalNumber","prevCountry","newCountry","useNationalFormat","phoneDigits","countryRequired","prevPhoneDigits","limitMaxLength","international","countryCallingCodeEditable","onChange","number"],"mappings":"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","sourcesContent":["import {\n\tgetPreSelectedCountry,\n\tgetCountrySelectOptions,\n\tparsePhoneNumber,\n\tgenerateNationalNumberDigits,\n\tgetPhoneDigitsForNewCountry,\n\te164,\n\tgetCountryForPartialE164Number,\n\tonPhoneDigitsChange,\n\tgetInitialPhoneDigits,\n\t// Private functions\n\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber,\n\tcompareStrings,\n\tstripCountryCallingCode,\n\tgetNationalSignificantNumberDigits,\n\tcouldNumberBelongToCountry,\n\ttrimNumber\n} from './phoneInputHelpers'\n\nimport metadata from 'libphonenumber-js/metadata.min.json'\n\ndescribe('phoneInputHelpers', () => {\n\tit('should get pre-selected country', () => {\n\t\t// Can't return \"International\". Return the first country available.\n\t\tgetPreSelectedCountry({\n\t\t\tvalue: '+11111111111',\n\t\t\tphoneNumber: {},\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tgetAnyCountry: () => 'US',\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('US')\n\n\t\t// Can return \"International\".\n\t\t// Country can't be derived from the phone number.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\n\t\texpect(getPreSelectedCountry({\n\t\t\tvalue: '+11111111111',\n\t\t\tphoneNumber: {},\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tgetAnyCountry: () => 'US',\n\t\t\trequired: false,\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\t// Can return \"International\".\n\t\t// Country can't be derived from the phone number.\n\t\t// Has `defaultCountry`.\n\t\t// Has `value`.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\n\t\texpect(getPreSelectedCountry({\n\t\t\tvalue: '+11111111111',\n\t\t\tphoneNumber: {},\n\t\t\tdefaultCountry: 'RU',\n\t\t\tcountries: ['RU', 'FR'],\n\t\t\trequired: false,\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\t// Can return \"International\".\n\t\t// Country can be derived from the phone number.\n\t\t// Has `defaultCountry`.\n\t\t// Has a valid partial `value`.\n\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/378\n\t\texpect(getPreSelectedCountry({\n\t\t\tvalue: '+7800',\n\t\t\tdefaultCountry: 'RU',\n\t\t\tcountries: ['RU', 'FR'],\n\t\t\trequired: false,\n\t\t\tmetadata\n\t\t})).to.equal('RU')\n\n\t\t// Derive country from the phone number.\n\t\tgetPreSelectedCountry({\n\t\t\tvalue: '+78005553535',\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tgetAnyCountry: () => 'US',\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('RU')\n\n\t\t// Country derived from the phone number overrides the supplied one.\n\t\tgetPreSelectedCountry({\n\t\t\tvalue: '+78005553535',\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\n\t\t\tdefaultCountry: 'US',\n\t\t\tcountries: ['US', 'RU'],\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('RU')\n\n\t\t// Only pre-select a country if it's in the available `countries` list.\n\t\tgetPreSelectedCountry({\n\t\t\tvalue: '+78005553535',\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\n\t\t\tcountries: ['US', 'DE'],\n\t\t\tgetAnyCountry: () => 'US',\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('US')\n\n\t\texpect(getPreSelectedCountry({\n\t\t\tvalue: '+78005553535',\n\t\t\tphoneNumber: { country: 'RU', phone: '8005553535' },\n\t\t\tdefaultCountry: 'US',\n\t\t\tcountries: ['US', 'DE'],\n\t\t\trequired: false,\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\t})\n\n\tit('should generate country select options', () => {\n\t\tconst defaultLabels = {\n\t\t\t'RU': 'Russia (Россия)',\n\t\t\t'US': 'United States',\n\t\t\t'ZZ': 'International'\n\t\t}\n\n\t\t// Without custom country names.\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: defaultLabels\n\t\t}).should.deep.equal([{\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'Russia (Россия)'\n\t\t}, {\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}])\n\n\t\t// With custom country names.\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia' }\n\t\t}).should.deep.equal([{\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'Russia'\n\t\t}, {\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}])\n\n\t\t// Should substitute missing country names with country codes.\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: { ...defaultLabels, 'RU': undefined }\n\t\t}).should.deep.equal([{\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'RU'\n\t\t}, {\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}])\n\n\t\t// With \"International\" (without custom country names).\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: defaultLabels,\n\t\t\taddInternationalOption: true\n\t\t}).should.deep.equal([{\n\t\t\tlabel: 'International'\n\t\t}, {\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'Russia (Россия)'\n\t\t}, {\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}])\n\n\t\t// With \"International\" (with custom country names).\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: { ...defaultLabels, 'RU': 'Russia', ZZ: 'Intl' },\n\t\t\taddInternationalOption: true\n\t\t}).should.deep.equal([{\n\t\t\tlabel: 'Intl'\n\t\t}, {\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'Russia'\n\t\t}, {\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}])\n\t})\n\n\tit('should generate country select options (custom `compareStrings`)', () => {\n\t\tconst defaultLabels = {\n\t\t\t'RU': 'Russia (Россия)',\n\t\t\t'US': 'United States',\n\t\t\t'ZZ': 'International'\n\t\t}\n\n\t\t// Without custom country names.\n\t\tgetCountrySelectOptions({\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tcountryNames: defaultLabels,\n\t\t\t// Reverse order.\n\t\t\tcompareStrings: (a, b) => a < b ? 1 : (a > b ? -1 : 0)\n\t\t}).should.deep.equal([{\n\t\t\tvalue: 'US',\n\t\t\tlabel: 'United States'\n\t\t}, {\n\t\t\tvalue: 'RU',\n\t\t\tlabel: 'Russia (Россия)'\n\t\t}])\n\t})\n\n\t// it('should generate country select options (Chinese locale)', () => {\n\t// \t// https://gitlab.com/catamphetamine/react-phone-number-input/-/issues/20\n\t//\n\t// \tconst defaultLabels = {\n\t// \t\t'RU': 'Russia (Россия)',\n\t// \t\t'US': 'United States',\n\t// \t\t'ZZ': 'International'\n\t// \t}\n\t//\n\t// \t// Without custom country names.\n\t// \tgetCountrySelectOptions({\n\t// \t\tcountries: ['US', 'RU'],\n\t// \t\tcountryNames: defaultLabels,\n\t// \t\tcompareStringsLocales: 'zh-CN-u-co-pinyin'\n\t// \t}).should.deep.equal([{\n\t// \t\tvalue: 'US',\n\t// \t\tlabel: 'United States'\n\t// \t}, {\n\t// \t\tvalue: 'RU',\n\t// \t\tlabel: 'Russia (Россия)'\n\t// \t}])\n\t// })\n\n\tit('should parse phone numbers', () => {\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\n\t\tphoneNumber.country.should.equal('RU')\n\t\tphoneNumber.nationalNumber.should.equal('8005553535')\n\n\t\t// No `value` passed.\n\t\texpect(parsePhoneNumber(null, metadata)).to.equal.undefined\n\t})\n\n\tit('should generate national number digits', () => {\n\t\tconst phoneNumber = parsePhoneNumber('+33509758351', metadata)\n\t\tgenerateNationalNumberDigits(phoneNumber).should.equal('0509758351')\n\t})\n\n\tit('should migrate parsed input for new country', () => {\n\t\t// Country didn't change. Return the same digits.\n\t\tgetPhoneDigitsForNewCountry('', {\n\t\t\tprevCountry: 'US',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('')\n\n\t\t// Country didn't change. Return the same digits.\n\t\tgetPhoneDigitsForNewCountry('123', {\n\t\t\tprevCountry: 'US',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('123')\n\n\t\t// Country didn't change. Return the same digits.\n\t\tgetPhoneDigitsForNewCountry('+123', {\n\t\t\tprevCountry: 'US',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+123')\n\n\t\t// No input. Returns `undefined`.\n\t\tgetPhoneDigitsForNewCountry('', {\n\t\t\tprevCountry: 'RU',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('')\n\n\t\t// Switching from \"International\" to a country\n\t\t// to which the phone number already belongs to.\n\t\t// No changes. Returns `undefined`.\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+18005553535')\n\n\t\t// Switching between countries. National number. No changes.\n\t\tgetPhoneDigitsForNewCountry('8005553535', {\n\t\t\tprevCountry: 'RU',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('8005553535')\n\n\t\t// Switching from \"International\" to a country. Calling code not matches. Resets parsed input.\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1')\n\n\t\t// Switching from \"International\" to a country. Calling code matches. Doesn't reset parsed input.\n\t\tgetPhoneDigitsForNewCountry('+12223333333', {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+12223333333')\n\n\t\t// Switching countries. International number. Calling code doesn't match.\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\n\t\t\tprevCountry: 'RU',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1')\n\n\t\t// Switching countries. International number. Calling code matches.\n\t\tgetPhoneDigitsForNewCountry('+18005553535', {\n\t\t\tprevCountry: 'CA',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+18005553535')\n\n\t\t// Switching countries. International number.\n\t\t// Country calling code is longer than the amount of digits available.\n\t\tgetPhoneDigitsForNewCountry('+99', {\n\t\t\tprevCountry: 'KG',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1')\n\n\t\t// Switching countries. International number. No such country code.\n\t\tgetPhoneDigitsForNewCountry('+99', {\n\t\t\tprevCountry: 'KG',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1')\n\n\t\t// Switching to \"International\". National number.\n\t\tgetPhoneDigitsForNewCountry('8800555', {\n\t\t\tprevCountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.equal('+7800555')\n\n\t\t// Switching to \"International\". No national (significant) number digits entered.\n\t\tgetPhoneDigitsForNewCountry('8', {\n\t\t\tprevCountry: 'RU',\n\t\t\tmetadata\n\t\t// }).should.equal('')\n\t\t}).should.equal('+7')\n\n\t\t// Switching to \"International\". International number. No changes.\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\n\t\t\tprevCountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.equal('+78005553535')\n\n\t\t// Prefer national format. Country matches. Leaves the \"national (significant) number\".\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\n\t\t\tnewCountry: 'RU',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('8005553535')\n\n\t\t// Prefer national format. Country doesn't match, but country calling code does. Leaves the \"national (significant) number\".\n\t\tgetPhoneDigitsForNewCountry('+12133734253', {\n\t\t\tnewCountry: 'CA',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('2133734253')\n\n\t\t// Prefer national format. Country doesn't match, neither does country calling code. Clears the value.\n\t\tgetPhoneDigitsForNewCountry('+78005553535', {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: true\n\t\t}).should.equal('')\n\n\t\t// Force international format. `phoneDigits` is empty. From no country to a country.\n\t\tgetPhoneDigitsForNewCountry(null, {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata,\n\t\t\tuseNationalFormat: false\n\t\t}).should.equal('+1')\n\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with the same calling code.\n\t\tgetPhoneDigitsForNewCountry('+1222', {\n\t\t\tprevCountry: 'CA',\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1222')\n\n\t\t// Force international format. `phoneDigits` is not empty. From a country to a country with another calling code.\n\t\tgetPhoneDigitsForNewCountry('+1222', {\n\t\t\tprevCountry: 'CA',\n\t\t\tnewCountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.equal('+7')\n\n\t\t// Force international format. `phoneDigits` is not empty. From no country to a country.\n\t\tgetPhoneDigitsForNewCountry('+1222', {\n\t\t\tnewCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.equal('+1222')\n\t})\n\n\tit('should format phone number in e164', () =>\n\t{\n\t\t// No number.\n\t\texpect(e164()).to.be.undefined\n\n\t\t// International number. Just a '+' sign.\n\t\texpect(e164('+')).to.be.undefined\n\n\t\t// International number.\n\t\te164('+7800', null, metadata).should.equal('+7800')\n\n\t\t// National number. Without country.\n\t\texpect(e164('8800', null, metadata)).to.be.undefined\n\n\t\t// National number. With country. Just national prefix.\n\t\t// expect(e164('8', 'RU', metadata)).to.be.undefined\n\t\te164('8', 'RU', metadata).should.equal('+7')\n\n\t\t// National number. With country.\n\t\te164('8800', 'RU', metadata).should.equal('+7800')\n\t})\n\n\tit('should trim the phone number if it exceeds the maximum length', () =>\n\t{\n\t\t// // No number.\n\t\t// expect(trimNumber()).to.be.undefined\n\n\t\t// Empty number.\n\t\texpect(trimNumber('', 'RU', metadata)).to.equal('')\n\n\t\t// // International number. Without country.\n\t\t// trimNumber('+780055535351').should.equal('+780055535351')\n\n\t\t// // National number. Without country.\n\t\t// trimNumber('880055535351', null).should.equal('880055535351')\n\n\t\t// National number. Doesn't exceed the maximum length.\n\t\ttrimNumber('2135553535', 'US', metadata).should.equal('2135553535')\n\t\t// National number. Exceeds the maximum length.\n\t\ttrimNumber('21355535351', 'US', metadata).should.equal('2135553535')\n\n\t\t// International number. Doesn't exceed the maximum length.\n\t\ttrimNumber('+12135553535', 'US', metadata).should.equal('+12135553535')\n\t\t// International number. Exceeds the maximum length.\n\t\ttrimNumber('+121355535351', 'US', metadata).should.equal('+12135553535')\n\t})\n\n\tit('should get country for partial E.164 number', () =>\n\t{\n\t\t// Just a '+' sign.\n\t\tgetCountryForPartialE164Number('+', {\n\t\t\tcountry: 'RU',\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tmetadata\n\t\t}).should.equal('RU')\n\n\t\texpect(getCountryForPartialE164Number('+', {\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\t// A country can be derived.\n\t\tgetCountryForPartialE164Number('+78005553535', {\n\t\t\tcountries: ['US', 'RU'],\n\t\t\tmetadata\n\t\t}).should.equal('RU')\n\n\t\t// A country can't be derived yet.\n\t\t// And the currently selected country doesn't fit the number.\n\t\texpect(getCountryForPartialE164Number('+7', {\n\t\t\tcountry: 'FR',\n\t\t\tcountries: ['FR', 'RU'],\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\texpect(getCountryForPartialE164Number('+12', {\n\t\t\tcountry: 'FR',\n\t\t\tcountries: ['FR', 'US'],\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\t// A country can't be derived yet.\n\t\t// And the currently selected country doesn't fit the number.\n\t\t// Bit \"International\" option is not available.\n\t\tgetCountryForPartialE164Number('+7', {\n\t\t\tcountry: 'FR',\n\t\t\tcountries: ['FR', 'RU'],\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('FR')\n\n\t\tgetCountryForPartialE164Number('+12', {\n\t\t\tcountry: 'FR',\n\t\t\tcountries: ['FR', 'US'],\n\t\t\trequired: true,\n\t\t\tmetadata\n\t\t}).should.equal('FR')\n\t})\n\n\tit('should get country from possibly incomplete international phone number', () =>\n\t{\n\t\t// // `001` country calling code.\n\t\t// // Non-geographic numbering plan.\n\t\t// expect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+800', metadata)).to.be.undefined\n\n\t\t// Country can be derived.\n\t\tgetCountryFromPossiblyIncompleteInternationalPhoneNumber('+33', metadata).should.equal('FR')\n\n\t\t// Country can't be derived yet.\n\t\texpect(getCountryFromPossiblyIncompleteInternationalPhoneNumber('+12', metadata)).to.be.undefined\n\t})\n\n\tit('should compare strings', () =>\n\t{\n\t\tcompareStrings('aa', 'ab').should.equal(-1)\n\t\tcompareStrings('aa', 'aa').should.equal(0)\n\t\tcompareStrings('aac', 'aab').should.equal(1)\n\t})\n\n\tit('should strip country calling code from a number', () =>\n\t{\n\t\t// Number is longer than country calling code prefix.\n\t\tstripCountryCallingCode('+7800', 'RU', metadata).should.equal('800')\n\n\t\t// Number is shorter than (or equal to) country calling code prefix.\n\t\tstripCountryCallingCode('+3', 'FR', metadata).should.equal('')\n\t\tstripCountryCallingCode('+7', 'FR', metadata).should.equal('')\n\n\t\t// `country` doesn't fit the actual `number`.\n\t\t// Iterates through all available country calling codes.\n\t\tstripCountryCallingCode('+7800', 'FR', metadata).should.equal('800')\n\n\t\t// No `country`.\n\t\t// And the calling code doesn't belong to any country.\n\t\tstripCountryCallingCode('+999', null, metadata).should.equal('')\n\t})\n\n\tit('should get national significant number part', () =>\n\t{\n\t\t// International number.\n\t\tgetNationalSignificantNumberDigits('+7800555', null, metadata).should.equal('800555')\n\n\t\t// International number.\n\t\t// No national (significant) number digits.\n\t\texpect(getNationalSignificantNumberDigits('+', null, metadata)).to.be.undefined\n\t\texpect(getNationalSignificantNumberDigits('+7', null, metadata)).to.be.undefined\n\n\t\t// National number.\n\t\tgetNationalSignificantNumberDigits('8800555', 'RU', metadata).should.equal('800555')\n\n\t\t// National number.\n\t\t// No national (significant) number digits.\n\t\texpect(getNationalSignificantNumberDigits('8', 'RU', metadata)).to.be.undefined\n\t\texpect(getNationalSignificantNumberDigits('', 'RU', metadata)).to.be.undefined\n\t})\n\n\tit('should determine of a number could belong to a country', () =>\n\t{\n\t\t// Matching.\n\t\tcouldNumberBelongToCountry('+7800', 'RU', metadata).should.equal(true)\n\n\t\t// First digit already not matching.\n\t\tcouldNumberBelongToCountry('+7800', 'FR', metadata).should.equal(false)\n\n\t\t// First digit matching, second - not matching.\n\t\tcouldNumberBelongToCountry('+33', 'AM', metadata).should.equal(false)\n\n\t\t// Number is shorter than country calling code.\n\t\tcouldNumberBelongToCountry('+99', 'KG', metadata).should.equal(true)\n\t})\n\n\tit('should handle phone digits change (should choose new \"value\" based on phone digits)', () => {\n\t\tonPhoneDigitsChange('+', {\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\n\t\tonPhoneDigitsChange('+', {\n\t\t\tmetadata,\n\t\t\tcountryRequired: true,\n\t\t\tgetAnyCountry: () => 'US'\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+',\n\t\t\tcountry: 'US',\n\t\t\tvalue: undefined\n\t\t})\n\n\t\tonPhoneDigitsChange('+7', {\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+7',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+7'\n\t\t})\n\n\t\tonPhoneDigitsChange('+7', {\n\t\t\tmetadata,\n\t\t\tcountry: 'RU'\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+7',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\n\t\tonPhoneDigitsChange('+78', {\n\t\t\tmetadata,\n\t\t\tcountry: 'RU'\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+78',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78'\n\t\t})\n\t})\n\n\tit('should handle phone digits change', () => {\n\t\tonPhoneDigitsChange(undefined, {\n\t\t\tcountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: undefined,\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\n\t\tonPhoneDigitsChange('', {\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\n\t\tonPhoneDigitsChange('1213', {\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+1213',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+1213'\n\t\t})\n\n\t\tonPhoneDigitsChange('+1213', {\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+1213',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+1213'\n\t\t})\n\n\t\tonPhoneDigitsChange('213', {\n\t\t\tcountry: 'US',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '213',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+1213'\n\t\t})\n\n\t\tonPhoneDigitsChange('+78005553535', {\n\t\t\tcountry: 'US',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78005553535'\n\t\t})\n\n\t\t// Won't reset an already selected country.\n\n\t\tonPhoneDigitsChange('+15555555555', {\n\t\t\tcountry: 'US',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+15555555555',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+15555555555'\n\t\t})\n\n\t\t// Should reset the country if it has likely been automatically\n\t\t// selected based on international phone number input\n\t\t// and the user decides to erase all input.\n\t\tonPhoneDigitsChange('', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\n\t\t// Should reset the country if it has likely been automatically\n\t\t// selected based on international phone number input\n\t\t// and the user decides to erase all input.\n\t\t// Should reset to default country.\n\t\tonPhoneDigitsChange('', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tdefaultCountry: 'US',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: 'US',\n\t\t\tvalue: undefined\n\t\t})\n\n\t\t// Should reset the country if it has likely been automatically\n\t\t// selected based on international phone number input\n\t\t// and the user decides to erase all input up to the `+` sign.\n\t\tonPhoneDigitsChange('+', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\t})\n\n\tit('should handle phone digits change (limitMaxLength: true)', () => {\n\t\tonPhoneDigitsChange('21337342530',{\n\t\t\tcountry: 'US',\n\t\t\tlimitMaxLength: true,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '2133734253',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+12133734253'\n\t\t})\n\n\t\tonPhoneDigitsChange('+121337342530', {\n\t\t\tcountry: 'US',\n\t\t\tlimitMaxLength: true,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+12133734253',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+12133734253'\n\t\t})\n\n\t\t// This case is intentionally ignored to simplify the code.\n\t\tonPhoneDigitsChange('+121337342530', {\n\t\t\tlimitMaxLength: true,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\t// phoneDigits: '+12133734253',\n\t\t\t// country: 'US',\n\t\t\t// value: '+12133734253'\n\t\t\tphoneDigits: '+121337342530',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+121337342530'\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: true`)', () => {\n\t\t// Shouldn't set `country` to `defaultCountry`\n\t\t// when erasing parsed input starting with a `+`\n\t\t// when `international` is `true`.\n\t\tonPhoneDigitsChange('', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tdefaultCountry: 'US',\n\t\t\tinternational: true,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\n\t\t// Should support forcing international phone number input format.\n\t\tonPhoneDigitsChange('2', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+2',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+2'\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (reset incompatible international input)', () => {\n\t\tonPhoneDigitsChange('+1', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tcountryCallingCodeEditable: false,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+7',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (append national input)', () => {\n\t\tonPhoneDigitsChange('8', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tcountryCallingCodeEditable: false,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+78',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78'\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: true` and `countryCallingCodeEditable: false`) (compatible input)', () => {\n\t\tonPhoneDigitsChange('+7', {\n\t\t\tprevPhoneDigits: '+78005553535',\n\t\t\tcountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tcountryCallingCodeEditable: false,\n\t\t\tmetadata\n\t\t}).should.deep.equal({\n\t\t\tphoneDigits: '+7',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: false`)', () => {\n\t\tconst onChange = (phoneDigits, prevPhoneDigits, country) => onPhoneDigitsChange(phoneDigits, {\n\t\t\tprevPhoneDigits,\n\t\t\tcountry,\n\t\t\tinternational: false,\n\t\t\tmetadata\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Just country calling code.\n\t\tonChange('+7', '', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Country calling code and first digit.\n\t\t// (which is assumed a \"national prefix\").\n\t\tonChange('+78', '', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '8',\n\t\t\tcountry: 'RU',\n\t\t\t// value: undefined\n\t\t\tvalue: '+7'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Country calling code and first two digits.\n\t\tonChange('+121', '', 'US').should.deep.equal({\n\t\t\tphoneDigits: '21',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+121'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\tonChange('+78005553535', '', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '88005553535',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78005553535'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Another country: just trims the `+`.\n\t\tonChange('+78005553535', '', 'US').should.deep.equal({\n\t\t\tphoneDigits: '78005553535',\n\t\t\tcountry: 'US',\n\t\t\tvalue: '+178005553535'\n\t\t})\n\n\t\t// `phoneDigits` in national format.\n\t\tonChange('88005553535', '', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '88005553535',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78005553535'\n\t\t})\n\n\t\t// `phoneDigits` in national format.\n\t\tonChange('88005553535', '8800555353', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '88005553535',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78005553535'\n\t\t})\n\n\t\t// Empty `phoneDigits`.\n\t\tonChange('', '88005553535', 'RU').should.deep.equal({\n\t\t\tphoneDigits: '',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: undefined\n\t\t})\n\t})\n\n\tit('should handle phone digits change (`international: false` and no country selected)', () => {\n\t\t// If `international` is `false` then it means that\n\t\t// \"International\" option should not be available,\n\t\t// so it doesn't handle the cases when it is available.\n\n\t\tconst onChange = (phoneDigits) => onPhoneDigitsChange(phoneDigits, {\n\t\t\tprevPhoneDigits: '',\n\t\t\tinternational: false,\n\t\t\tmetadata\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// No country calling code.\n\t\tonChange('+').should.deep.equal({\n\t\t\tphoneDigits: '+',\n\t\t\tcountry: undefined,\n\t\t\tvalue: undefined\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Just country calling code.\n\t\tonChange('+7').should.deep.equal({\n\t\t\tphoneDigits: '+7',\n\t\t\tcountry: undefined,\n\t\t\tvalue: '+7'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Country calling code and first digit.\n\t\t// (which is assumed a \"national prefix\").\n\t\tonChange('+78').should.deep.equal({\n\t\t\tphoneDigits: '8',\n\t\t\tcountry: 'RU',\n\t\t\t// value: undefined\n\t\t\tvalue: '+7'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Country calling code and first two digits.\n\t\tonChange('+3311').should.deep.equal({\n\t\t\tphoneDigits: '11',\n\t\t\tcountry: 'FR',\n\t\t\tvalue: '+3311'\n\t\t})\n\n\t\t// `phoneDigits` in international format.\n\t\t// Full number.\n\t\tonChange('+78005553535').should.deep.equal({\n\t\t\tphoneDigits: '88005553535',\n\t\t\tcountry: 'RU',\n\t\t\tvalue: '+78005553535'\n\t\t})\n\t})\n\n\tit('should get initial parsed input', () => {\n\t\tgetInitialPhoneDigits({\n\t\t\tvalue: '+78005553535',\n\t\t\tdefaultCountry: 'RU',\n\t\t\tinternational: false,\n\t\t\tmetadata\n\t\t}).should.equal('+78005553535')\n\n\t\tgetInitialPhoneDigits({\n\t\t\tvalue: '+78005553535',\n\t\t\tdefaultCountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tmetadata\n\t\t}).should.equal('+78005553535')\n\n\t\tgetInitialPhoneDigits({\n\t\t\tvalue: undefined,\n\t\t\tdefaultCountry: 'RU',\n\t\t\tinternational: true,\n\t\t\tmetadata\n\t\t}).should.equal('+7')\n\n\t\texpect(getInitialPhoneDigits({\n\t\t\tvalue: undefined,\n\t\t\tdefaultCountry: 'RU',\n\t\t\tinternational: false,\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\n\t\texpect(getInitialPhoneDigits({\n\t\t\tvalue: undefined,\n\t\t\tinternational: false,\n\t\t\tmetadata\n\t\t})).to.be.undefined\n\t})\n\n\tit('should get initial parsed input (has `phoneNumber` that has `country`)', () => {\n\t\tconst phoneNumber = parsePhoneNumber('+78005553535', metadata)\n\t\tgetInitialPhoneDigits({\n\t\t\tvalue: phoneNumber.number,\n\t\t\tdefaultCountry: 'RU',\n\t\t\tuseNationalFormat: true,\n\t\t\tphoneNumber,\n\t\t\tmetadata\n\t\t}).should.equal('88005553535')\n\t})\n\n\tit('should get initial parsed input (has `phoneNumber` that has no `country`)', () => {\n\t\tconst phoneNumber = parsePhoneNumber('+870773111632', metadata)\n\t\tgetInitialPhoneDigits({\n\t\t\tvalue: phoneNumber.number,\n\t\t\tdefaultCountry: 'RU',\n\t\t\tuseNationalFormat: true,\n\t\t\tphoneNumber,\n\t\t\tmetadata\n\t\t}).should.equal('+870773111632')\n\t})\n})"],"file":"phoneInputHelpers.test.js"}