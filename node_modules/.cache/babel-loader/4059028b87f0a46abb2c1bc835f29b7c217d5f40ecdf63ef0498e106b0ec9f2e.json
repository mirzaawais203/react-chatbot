{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport { getInitialPhoneDigits, getCountryForPartialE164Number, parsePhoneNumber } from './phoneInputHelpers';\nimport { isCountrySupportedWithError, getSupportedCountries } from './countries';\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\n  var metadata = props.metadata,\n    countries = props.countries,\n    newDefaultCountry = props.defaultCountry,\n    newValue = props.value,\n    newReset = props.reset,\n    international = props.international,\n    displayInitialValueAsLocalNumber = props.displayInitialValueAsLocalNumber,\n    initialValueFormat = props.initialValueFormat;\n  var prevDefaultCountry = prevProps.defaultCountry,\n    prevValue = prevProps.value,\n    prevReset = prevProps.reset;\n  var country = state.country,\n    value = state.value,\n    hasUserSelectedACountry = state.hasUserSelectedACountry;\n  var _getInitialPhoneDigits = function _getInitialPhoneDigits(parameters) {\n    return getInitialPhoneDigits(_objectSpread({}, parameters, {\n      international: international,\n      useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n      metadata: metadata\n    }));\n  }; // Some users requested a way to reset the component\n  // (both number `<input/>` and country `<select/>`).\n  // Whenever `reset` property changes both number `<input/>`\n  // and country `<select/>` are reset.\n  // It's not implemented as some instance `.reset()` method\n  // because `ref` is forwarded to `<input/>`.\n  // It's also not replaced with just resetting `country` on\n  // external `value` reset, because a user could select a country\n  // and then not input any `value`, and so the selected country\n  // would be \"stuck\", if not using this `reset` property.\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n\n  if (newReset !== prevReset) {\n    return {\n      phoneDigits: _getInitialPhoneDigits({\n        value: undefined,\n        defaultCountry: newDefaultCountry\n      }),\n      value: undefined,\n      country: newDefaultCountry,\n      hasUserSelectedACountry: undefined\n    };\n  } // `value` is the value currently shown in the component:\n  // it's stored in the component's `state`, and it's not the `value` property.\n  // `prevValue` is \"previous `value` property\".\n  // `newValue` is \"new `value` property\".\n  // If the default country changed\n  // (e.g. in case of ajax GeoIP detection after page loaded)\n  // then select it, but only if the user hasn't already manually\n  // selected a country, and no phone number has been manually entered so far.\n  // Because if the user has already started inputting a phone number\n  // then they're okay with no country being selected at all (\"International\")\n  // and they don't want to be disturbed, don't want their input to be screwed, etc.\n\n  if (newDefaultCountry !== prevDefaultCountry) {\n    var isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata);\n    var noValueHasBeenEnteredByTheUser =\n    // By default, \"no value has been entered\" means `value` is `undefined`.\n    !value ||\n    // When `international` is `true`, and some country has been pre-selected,\n    // then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\n    // so in case of `international` being `true`, \"the user hasn't entered anything\" situation\n    // doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\n    international && value === _getInitialPhoneDigits({\n      value: undefined,\n      defaultCountry: prevDefaultCountry\n    }); // Only update the `defaultCountry` property if no phone number\n    // has been entered by the user or pre-set by the application.\n\n    var noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser;\n    if (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\n      return {\n        country: newDefaultCountry,\n        // If `phoneDigits` is empty, then automatically select the new `country`\n        // and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\n        // The code assumes that \"no phone number has been entered by the user\",\n        // and no `value` property has been passed, so the `phoneNumber` parameter\n        // of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\n        phoneDigits: _getInitialPhoneDigits({\n          value: undefined,\n          defaultCountry: newDefaultCountry\n        }),\n        // `value` is `undefined` and it stays so.\n        value: undefined\n      };\n    }\n  } // If a new `value` is set externally.\n  // (e.g. as a result of an ajax API request\n  //  to get user's phone after page loaded)\n  // The first part — `newValue !== prevValue` —\n  // is basically `props.value !== prevProps.value`\n  // so it means \"if value property was changed externally\".\n  // The second part — `newValue !== value` —\n  // is for ignoring the `getDerivedStateFromProps()` call\n  // which happens in `this.onChange()` right after `this.setState()`.\n  // If this `getDerivedStateFromProps()` call isn't ignored\n  // then the country flag would reset on each input.\n\n  if (newValue !== prevValue && newValue !== value) {\n    var phoneNumber;\n    var parsedCountry;\n    if (newValue) {\n      phoneNumber = parsePhoneNumber(newValue, metadata);\n      var supportedCountries = getSupportedCountries(countries, metadata);\n      if (phoneNumber && phoneNumber.country) {\n        // Ignore `else` because all countries are supported in metadata.\n\n        /* istanbul ignore next */\n        if (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\n          parsedCountry = phoneNumber.country;\n        }\n      } else {\n        parsedCountry = getCountryForPartialE164Number(newValue, {\n          country: undefined,\n          countries: supportedCountries,\n          metadata: metadata\n        });\n      }\n    }\n    var hasUserSelectedACountryUpdate;\n    if (!newValue) {\n      // Reset `hasUserSelectedACountry` flag in `state`.\n      hasUserSelectedACountryUpdate = {\n        hasUserSelectedACountry: undefined\n      };\n    }\n    return _objectSpread({}, hasUserSelectedACountryUpdate, {\n      phoneDigits: _getInitialPhoneDigits({\n        phoneNumber: phoneNumber,\n        value: newValue,\n        defaultCountry: newDefaultCountry\n      }),\n      value: newValue,\n      country: newValue ? parsedCountry : newDefaultCountry\n    });\n  } // `defaultCountry` didn't change.\n  // `value` didn't change.\n  // `phoneDigits` didn't change, because `value` didn't change.\n  //\n  // So no need to update state.\n}","map":{"version":3,"names":["getInitialPhoneDigits","getCountryForPartialE164Number","parsePhoneNumber","isCountrySupportedWithError","getSupportedCountries","getPhoneInputWithCountryStateUpdateFromNewProps","props","prevProps","state","metadata","countries","newDefaultCountry","defaultCountry","newValue","value","newReset","reset","international","displayInitialValueAsLocalNumber","initialValueFormat","prevDefaultCountry","prevValue","prevReset","country","hasUserSelectedACountry","_getInitialPhoneDigits","parameters","_objectSpread","useNationalFormat","phoneDigits","undefined","isNewDefaultCountrySupported","noValueHasBeenEnteredByTheUser","noValueHasBeenEntered","phoneNumber","parsedCountry","supportedCountries","indexOf","hasUserSelectedACountryUpdate"],"sources":["E:\\Hilighter\\chatbot\\node_modules\\react-phone-number-input-plus\\source\\helpers\\getPhoneInputWithCountryStateUpdateFromNewProps.js"],"sourcesContent":["import {\n\tgetInitialPhoneDigits,\n\tgetCountryForPartialE164Number,\n\tparsePhoneNumber\n} from './phoneInputHelpers'\n\nimport {\n\tisCountrySupportedWithError,\n\tgetSupportedCountries\n} from './countries'\n\nexport default function getPhoneInputWithCountryStateUpdateFromNewProps(props, prevProps, state) {\n\tconst {\n\t\tmetadata,\n\t\tcountries,\n\t\tdefaultCountry: newDefaultCountry,\n\t\tvalue: newValue,\n\t\treset: newReset,\n\t\tinternational,\n\t\t// `displayInitialValueAsLocalNumber` property has been\n\t\t// superceded by `initialValueFormat` property.\n\t\tdisplayInitialValueAsLocalNumber,\n\t\tinitialValueFormat\n\t} = props\n\n\tconst {\n\t\tdefaultCountry: prevDefaultCountry,\n\t\tvalue: prevValue,\n\t\treset: prevReset\n\t} = prevProps\n\n\tconst {\n\t\tcountry,\n\t\tvalue,\n\t\t// If the user has already manually selected a country\n\t\t// then don't override that already selected country\n\t\t// if the `defaultCountry` property changes.\n\t\t// That's what `hasUserSelectedACountry` flag is for.\n\t\thasUserSelectedACountry\n\t} = state\n\n\tconst _getInitialPhoneDigits = (parameters) => getInitialPhoneDigits({\n\t\t...parameters,\n\t\tinternational,\n\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n\t\tmetadata\n\t})\n\n\t// Some users requested a way to reset the component\n\t// (both number `<input/>` and country `<select/>`).\n\t// Whenever `reset` property changes both number `<input/>`\n\t// and country `<select/>` are reset.\n\t// It's not implemented as some instance `.reset()` method\n\t// because `ref` is forwarded to `<input/>`.\n\t// It's also not replaced with just resetting `country` on\n\t// external `value` reset, because a user could select a country\n\t// and then not input any `value`, and so the selected country\n\t// would be \"stuck\", if not using this `reset` property.\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\n\tif (newReset !== prevReset) {\n\t\treturn {\n\t\t\tphoneDigits: _getInitialPhoneDigits({\n\t\t\t\tvalue: undefined,\n\t\t\t\tdefaultCountry: newDefaultCountry\n\t\t\t}),\n\t\t\tvalue: undefined,\n\t\t\tcountry: newDefaultCountry,\n\t\t\thasUserSelectedACountry: undefined\n\t\t}\n\t}\n\n\t// `value` is the value currently shown in the component:\n\t// it's stored in the component's `state`, and it's not the `value` property.\n\t// `prevValue` is \"previous `value` property\".\n\t// `newValue` is \"new `value` property\".\n\n\t// If the default country changed\n\t// (e.g. in case of ajax GeoIP detection after page loaded)\n\t// then select it, but only if the user hasn't already manually\n\t// selected a country, and no phone number has been manually entered so far.\n\t// Because if the user has already started inputting a phone number\n\t// then they're okay with no country being selected at all (\"International\")\n\t// and they don't want to be disturbed, don't want their input to be screwed, etc.\n\tif (newDefaultCountry !== prevDefaultCountry) {\n\t\tconst isNewDefaultCountrySupported = !newDefaultCountry || isCountrySupportedWithError(newDefaultCountry, metadata)\n\t\tconst noValueHasBeenEnteredByTheUser = (\n\t\t\t// By default, \"no value has been entered\" means `value` is `undefined`.\n\t\t\t!value ||\n\t\t\t// When `international` is `true`, and some country has been pre-selected,\n\t\t\t// then the `<input/>` contains a pre-filled value of `+${countryCallingCode}${leadingDigits}`,\n\t\t\t// so in case of `international` being `true`, \"the user hasn't entered anything\" situation\n\t\t\t// doesn't just mean `value` is `undefined`, but could also mean `value` is `+${countryCallingCode}`.\n\t\t\t(international && value === _getInitialPhoneDigits({\n\t\t\t\tvalue: undefined,\n\t\t\t\tdefaultCountry: prevDefaultCountry\n\t\t\t}))\n\t\t)\n\t\t// Only update the `defaultCountry` property if no phone number\n\t\t// has been entered by the user or pre-set by the application.\n\t\tconst noValueHasBeenEntered = !newValue && noValueHasBeenEnteredByTheUser\n\t\tif (!hasUserSelectedACountry && isNewDefaultCountrySupported && noValueHasBeenEntered) {\n\t\t\treturn {\n\t\t\t\tcountry: newDefaultCountry,\n\t\t\t\t// If `phoneDigits` is empty, then automatically select the new `country`\n\t\t\t\t// and set `phoneDigits` to `+{getCountryCallingCode(newCountry)}`.\n\t\t\t\t// The code assumes that \"no phone number has been entered by the user\",\n\t\t\t\t// and no `value` property has been passed, so the `phoneNumber` parameter\n\t\t\t\t// of `_getInitialPhoneDigits({ value, phoneNumber, ... })` is `undefined`.\n\t\t\t\tphoneDigits: _getInitialPhoneDigits({\n\t\t\t\t\tvalue: undefined,\n\t\t\t\t\tdefaultCountry: newDefaultCountry\n\t\t\t\t}),\n\t\t\t\t// `value` is `undefined` and it stays so.\n\t\t\t\tvalue: undefined\n\t\t\t}\n\t\t}\n\t}\n\n\t// If a new `value` is set externally.\n\t// (e.g. as a result of an ajax API request\n\t//  to get user's phone after page loaded)\n\t// The first part — `newValue !== prevValue` —\n\t// is basically `props.value !== prevProps.value`\n\t// so it means \"if value property was changed externally\".\n\t// The second part — `newValue !== value` —\n\t// is for ignoring the `getDerivedStateFromProps()` call\n\t// which happens in `this.onChange()` right after `this.setState()`.\n\t// If this `getDerivedStateFromProps()` call isn't ignored\n\t// then the country flag would reset on each input.\n\tif (newValue !== prevValue && newValue !== value) {\n\t\tlet phoneNumber\n\t\tlet parsedCountry\n\t\tif (newValue) {\n\t\t\tphoneNumber = parsePhoneNumber(newValue, metadata)\n\t\t\tconst supportedCountries = getSupportedCountries(countries, metadata)\n\t\t\tif (phoneNumber && phoneNumber.country) {\n\t\t\t\t// Ignore `else` because all countries are supported in metadata.\n\t\t\t\t/* istanbul ignore next */\n\t\t\t\tif (!supportedCountries || supportedCountries.indexOf(phoneNumber.country) >= 0) {\n\t\t\t\t\tparsedCountry = phoneNumber.country\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tparsedCountry = getCountryForPartialE164Number(newValue, {\n\t\t\t\t\tcountry: undefined,\n\t\t\t\t\tcountries: supportedCountries,\n\t\t\t\t\tmetadata\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t\tlet hasUserSelectedACountryUpdate\n\t\tif (!newValue) {\n\t\t\t// Reset `hasUserSelectedACountry` flag in `state`.\n\t\t\thasUserSelectedACountryUpdate = {\n\t\t\t\thasUserSelectedACountry: undefined\n\t\t\t}\n\t\t}\n\t\treturn {\n\t\t\t...hasUserSelectedACountryUpdate,\n\t\t\tphoneDigits: _getInitialPhoneDigits({\n\t\t\t\tphoneNumber,\n\t\t\t\tvalue: newValue,\n\t\t\t\tdefaultCountry: newDefaultCountry\n\t\t\t}),\n\t\t\tvalue: newValue,\n\t\t\tcountry: newValue ? parsedCountry : newDefaultCountry\n\t\t}\n\t}\n\n\t// `defaultCountry` didn't change.\n\t// `value` didn't change.\n\t// `phoneDigits` didn't change, because `value` didn't change.\n\t//\n\t// So no need to update state.\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}