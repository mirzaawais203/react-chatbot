{"ast":null,"code":"function _typeof(obj) {\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n  return _typeof(obj);\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n  return _assertThisInitialized(self);\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport InputSmart from './InputSmart';\nimport InputBasic from './InputBasic';\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect';\nimport Flag from './Flag';\nimport InternationalIcon from './InternationalIcon';\nimport { sortCountryOptions, isCountrySupportedWithError, getSupportedCountries, getSupportedCountryOptions, getCountries } from './helpers/countries';\nimport { createCountryIconComponent } from './CountryIcon';\nimport { metadata as metadataPropType, labels as labelsPropType } from './PropTypes';\nimport { getPreSelectedCountry, getCountrySelectOptions as _getCountrySelectOptions, parsePhoneNumber, generateNationalNumberDigits, getPhoneDigitsForNewCountry, getInitialPhoneDigits, onPhoneDigitsChange, e164 } from './helpers/phoneInputHelpers';\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps';\nvar PhoneNumberInput_ = /*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inherits(PhoneNumberInput_, _React$PureComponent);\n  function PhoneNumberInput_(props) {\n    var _this;\n    _classCallCheck(this, PhoneNumberInput_);\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(PhoneNumberInput_).call(this, props));\n    _defineProperty(_assertThisInitialized(_this), \"inputRef\", React.createRef());\n    _defineProperty(_assertThisInitialized(_this), \"setInputRef\", function (instance) {\n      _this.inputRef.current = instance;\n      var ref = _this.props.inputRef;\n      if (ref) {\n        if (typeof ref === 'function') {\n          ref(instance);\n        } else {\n          ref.current = instance;\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"isCountrySupportedWithError\", function (country) {\n      var metadata = _this.props.metadata;\n      return isCountrySupportedWithError(country, metadata);\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCountryChange\", function (newCountry) {\n      var _this$props = _this.props,\n        international = _this$props.international,\n        metadata = _this$props.metadata,\n        onChange = _this$props.onChange,\n        focusInputOnCountrySelection = _this$props.focusInputOnCountrySelection;\n      var _this$state = _this.state,\n        prevPhoneDigits = _this$state.phoneDigits,\n        prevCountry = _this$state.country; // After the new `country` has been selected,\n      // if the phone number `<input/>` holds any digits\n      // then migrate those digits for the new `country`.\n\n      var newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n        prevCountry: prevCountry,\n        newCountry: newCountry,\n        metadata: metadata,\n        // Convert the phone number to \"national\" format\n        // when the user changes the selected country by hand.\n        useNationalFormat: !international\n      });\n      var newValue = e164(newPhoneDigits, newCountry, metadata); // Focus phone number `<input/>` upon country selection.\n\n      if (focusInputOnCountrySelection) {\n        _this.inputRef.current.focus();\n      } // If the user has already manually selected a country\n      // then don't override that already selected country\n      // if the `defaultCountry` property changes.\n      // That's what `hasUserSelectedACountry` flag is for.\n\n      _this.setState({\n        country: newCountry,\n        hasUserSelectedACountry: true,\n        phoneDigits: newPhoneDigits,\n        value: newValue\n      }, function () {\n        // Update the new `value` property.\n        // Doing it after the `state` has been updated\n        // because `onChange()` will trigger `getDerivedStateFromProps()`\n        // with the new `value` which will be compared to `state.value` there.\n        onChange(newValue);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onChange\", function (_phoneDigits) {\n      var _this$props2 = _this.props,\n        defaultCountry = _this$props2.defaultCountry,\n        onChange = _this$props2.onChange,\n        addInternationalOption = _this$props2.addInternationalOption,\n        international = _this$props2.international,\n        limitMaxLength = _this$props2.limitMaxLength,\n        countryCallingCodeEditable = _this$props2.countryCallingCodeEditable,\n        metadata = _this$props2.metadata;\n      var _this$state2 = _this.state,\n        countries = _this$state2.countries,\n        prevPhoneDigits = _this$state2.phoneDigits,\n        currentlySelectedCountry = _this$state2.country;\n      var _onPhoneDigitsChange = onPhoneDigitsChange(_phoneDigits, {\n          prevPhoneDigits: prevPhoneDigits,\n          country: currentlySelectedCountry,\n          countryRequired: !addInternationalOption,\n          defaultCountry: defaultCountry,\n          getAnyCountry: function getAnyCountry() {\n            return _this.getFirstSupportedCountry({\n              countries: countries\n            });\n          },\n          countries: countries,\n          international: international,\n          limitMaxLength: limitMaxLength,\n          countryCallingCodeEditable: countryCallingCodeEditable,\n          metadata: metadata\n        }),\n        phoneDigits = _onPhoneDigitsChange.phoneDigits,\n        country = _onPhoneDigitsChange.country,\n        value = _onPhoneDigitsChange.value;\n      var stateUpdate = {\n        phoneDigits: phoneDigits,\n        value: value,\n        country: country\n      };\n      if (countryCallingCodeEditable === false) {\n        // If it simply did `setState({ phoneDigits: intlPrefix })` here,\n        // then it would have no effect when erasing an inital international prefix\n        // via Backspace, because `phoneDigits` in `state` wouldn't change\n        // as a result, because it was `prefix` and it became `prefix`,\n        // so the component wouldn't rerender, and the user would be able\n        // to erase the country calling code part, and that part is\n        // assumed to be non-eraseable. That's why the component is\n        // forcefully rerendered here.\n        // https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n        if (!value && phoneDigits === _this.state.phoneDigits) {\n          // Force a re-render of the `<input/>` in order to reset its value.\n          stateUpdate.forceRerender = {};\n        }\n      }\n      _this.setState(stateUpdate,\n      // Update the new `value` property.\n      // Doing it after the `state` has been updated\n      // because `onChange()` will trigger `getDerivedStateFromProps()`\n      // with the new `value` which will be compared to `state.value` there.\n      function () {\n        return onChange(value);\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_onFocus\", function () {\n      return _this.setState({\n        isFocused: true\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"_onBlur\", function () {\n      return _this.setState({\n        isFocused: false\n      });\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onFocus\", function (event) {\n      _this._onFocus();\n      var onFocus = _this.props.onFocus;\n      if (onFocus) {\n        onFocus(event);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onBlur\", function (event) {\n      var onBlur = _this.props.onBlur;\n      _this._onBlur();\n      if (onBlur) {\n        onBlur(event);\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCountryFocus\", function (event) {\n      _this._onFocus(); // this.setState({ countrySelectFocused: true })\n\n      var countrySelectProps = _this.props.countrySelectProps;\n      if (countrySelectProps) {\n        var onFocus = countrySelectProps.onFocus;\n        if (onFocus) {\n          onFocus(event);\n        }\n      }\n    });\n    _defineProperty(_assertThisInitialized(_this), \"onCountryBlur\", function (event) {\n      _this._onBlur(); // this.setState({ countrySelectFocused: false })\n\n      var countrySelectProps = _this.props.countrySelectProps;\n      if (countrySelectProps) {\n        var onBlur = countrySelectProps.onBlur;\n        if (onBlur) {\n          onBlur(event);\n        }\n      }\n    });\n    var _this$props3 = _this.props,\n      _value = _this$props3.value,\n      labels = _this$props3.labels,\n      _international = _this$props3.international,\n      _addInternationalOption = _this$props3.addInternationalOption,\n      displayInitialValueAsLocalNumber = _this$props3.displayInitialValueAsLocalNumber,\n      initialValueFormat = _this$props3.initialValueFormat,\n      _metadata = _this$props3.metadata;\n    var _this$props4 = _this.props,\n      _defaultCountry = _this$props4.defaultCountry,\n      _countries = _this$props4.countries; // Validate `defaultCountry`.\n\n    if (_defaultCountry) {\n      if (!_this.isCountrySupportedWithError(_defaultCountry)) {\n        _defaultCountry = undefined;\n      }\n    } // Validate `countries`.\n\n    _countries = getSupportedCountries(_countries, _metadata);\n    var phoneNumber = parsePhoneNumber(_value, _metadata);\n    _this.CountryIcon = createCountryIconComponent(_this.props);\n    var preSelectedCountry = getPreSelectedCountry({\n      value: _value,\n      phoneNumber: phoneNumber,\n      defaultCountry: _defaultCountry,\n      required: !_addInternationalOption,\n      countries: _countries || getCountries(_metadata),\n      getAnyCountry: function getAnyCountry() {\n        return _this.getFirstSupportedCountry({\n          countries: _countries\n        });\n      },\n      metadata: _metadata\n    });\n    _this.state = {\n      // Workaround for `this.props` inside `getDerivedStateFromProps()`.\n      props: _this.props,\n      // The country selected.\n      country: preSelectedCountry,\n      // `countries` are stored in `this.state` because they're filtered.\n      // For example, a developer might theoretically pass some unsupported\n      // countries as part of the `countries` property, and because of that\n      // the component uses `this.state.countries` (which are filtered)\n      // instead of `this.props.countries`\n      // (which could potentially contain unsupported countries).\n      countries: _countries,\n      // `phoneDigits` state property holds non-formatted user's input.\n      // The reason is that there's no way of finding out\n      // in which form should `value` be displayed: international or national.\n      // E.g. if `value` is `+78005553535` then it could be input\n      // by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n      // Hence storing just `value` is not sufficient for correct formatting.\n      // E.g. if a user entered `8 (800) 555-35-35`\n      // then value is `+78005553535` and `phoneDigits` are `88005553535`\n      // and if a user entered `+7 800 555 35 35`\n      // then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n      phoneDigits: getInitialPhoneDigits({\n        value: _value,\n        phoneNumber: phoneNumber,\n        defaultCountry: _defaultCountry,\n        international: _international,\n        useNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n        metadata: _metadata\n      }),\n      // `value` property is duplicated in state.\n      // The reason is that `getDerivedStateFromProps()`\n      // needs this `value` to compare to the new `value` property\n      // to find out if `phoneDigits` needs updating:\n      // If the `value` property was changed externally\n      // then it won't be equal to `state.value`\n      // in which case `phoneDigits` and `country` should be updated.\n      value: _value\n    };\n    return _this;\n  }\n  _createClass(PhoneNumberInput_, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var onCountryChange = this.props.onCountryChange;\n      var defaultCountry = this.props.defaultCountry;\n      var selectedCountry = this.state.country;\n      if (onCountryChange) {\n        if (defaultCountry) {\n          if (!this.isCountrySupportedWithError(defaultCountry)) {\n            defaultCountry = undefined;\n          }\n        }\n        if (selectedCountry !== defaultCountry) {\n          onCountryChange(selectedCountry);\n        }\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState) {\n      var onCountryChange = this.props.onCountryChange;\n      var country = this.state.country; // Call `onCountryChange` when user selects another country.\n\n      if (onCountryChange && country !== prevState.country) {\n        onCountryChange(country);\n      }\n    }\n  }, {\n    key: \"getCountrySelectOptions\",\n    value: function getCountrySelectOptions(_ref) {\n      var countries = _ref.countries;\n      var _this$props5 = this.props,\n        international = _this$props5.international,\n        countryCallingCodeEditable = _this$props5.countryCallingCodeEditable,\n        countryOptionsOrder = _this$props5.countryOptionsOrder,\n        addInternationalOption = _this$props5.addInternationalOption,\n        labels = _this$props5.labels,\n        locales = _this$props5.locales,\n        metadata = _this$props5.metadata;\n      return useMemoCountrySelectOptions(function () {\n        return sortCountryOptions(_getCountrySelectOptions({\n          countries: countries || getCountries(metadata),\n          countryNames: labels,\n          addInternationalOption: international && countryCallingCodeEditable === false ? false : addInternationalOption,\n          compareStringsLocales: locales // compareStrings\n        }), getSupportedCountryOptions(countryOptionsOrder, metadata));\n      }, [countries, countryOptionsOrder, addInternationalOption, labels, metadata]);\n    }\n  }, {\n    key: \"getFirstSupportedCountry\",\n    value: function getFirstSupportedCountry(_ref2) {\n      var countries = _ref2.countries;\n      var countryOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return countryOptions[0].value;\n    } // A shorthand for not passing `metadata` as a second argument.\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props6 = this.props,\n        name = _this$props6.name,\n        disabled = _this$props6.disabled,\n        autoComplete = _this$props6.autoComplete,\n        style = _this$props6.style,\n        className = _this$props6.className,\n        inputRef = _this$props6.inputRef,\n        inputComponent = _this$props6.inputComponent,\n        numberInputProps = _this$props6.numberInputProps,\n        smartCaret = _this$props6.smartCaret,\n        CountrySelectComponent = _this$props6.countrySelectComponent,\n        countrySelectProps = _this$props6.countrySelectProps,\n        ContainerComponent = _this$props6.containerComponent,\n        defaultCountry = _this$props6.defaultCountry,\n        countriesProperty = _this$props6.countries,\n        countryOptionsOrder = _this$props6.countryOptionsOrder,\n        labels = _this$props6.labels,\n        flags = _this$props6.flags,\n        flagComponent = _this$props6.flagComponent,\n        flagUrl = _this$props6.flagUrl,\n        addInternationalOption = _this$props6.addInternationalOption,\n        internationalIcon = _this$props6.internationalIcon,\n        displayInitialValueAsLocalNumber = _this$props6.displayInitialValueAsLocalNumber,\n        initialValueFormat = _this$props6.initialValueFormat,\n        onCountryChange = _this$props6.onCountryChange,\n        limitMaxLength = _this$props6.limitMaxLength,\n        countryCallingCodeEditable = _this$props6.countryCallingCodeEditable,\n        focusInputOnCountrySelection = _this$props6.focusInputOnCountrySelection,\n        reset = _this$props6.reset,\n        metadata = _this$props6.metadata,\n        international = _this$props6.international,\n        locales = _this$props6.locales,\n        rest = _objectWithoutProperties(_this$props6, [\"name\", \"disabled\", \"autoComplete\", \"style\", \"className\", \"inputRef\", \"inputComponent\", \"numberInputProps\", \"smartCaret\", \"countrySelectComponent\", \"countrySelectProps\", \"containerComponent\", \"defaultCountry\", \"countries\", \"countryOptionsOrder\", \"labels\", \"flags\", \"flagComponent\", \"flagUrl\", \"addInternationalOption\", \"internationalIcon\", \"displayInitialValueAsLocalNumber\", \"initialValueFormat\", \"onCountryChange\", \"limitMaxLength\", \"countryCallingCodeEditable\", \"focusInputOnCountrySelection\", \"reset\", \"metadata\", \"international\", \"locales\"]);\n      var _this$state3 = this.state,\n        country = _this$state3.country,\n        countries = _this$state3.countries,\n        phoneDigits = _this$state3.phoneDigits,\n        isFocused = _this$state3.isFocused;\n      var InputComponent = smartCaret ? InputSmart : InputBasic;\n      var countrySelectOptions = this.getCountrySelectOptions({\n        countries: countries\n      });\n      return React.createElement(ContainerComponent, {\n        style: style,\n        className: classNames(className, 'PhoneInput', {\n          'PhoneInput--focus': isFocused\n        })\n      }, React.createElement(CountrySelectComponent, _extends({\n        name: name ? \"\".concat(name, \"Country\") : undefined,\n        \"aria-label\": labels.country\n      }, countrySelectProps, {\n        value: country,\n        options: countrySelectOptions,\n        onChange: this.onCountryChange,\n        onFocus: this.onCountryFocus,\n        onBlur: this.onCountryBlur,\n        disabled: disabled || countrySelectProps && countrySelectProps.disabled,\n        iconComponent: this.CountryIcon\n      })), React.createElement(InputComponent, _extends({\n        ref: this.setInputRef,\n        type: \"tel\",\n        autoComplete: autoComplete\n      }, numberInputProps, rest, {\n        name: name,\n        metadata: metadata,\n        country: country,\n        value: phoneDigits || '',\n        onChange: this.onChange,\n        onFocus: this.onFocus,\n        onBlur: this.onBlur,\n        disabled: disabled,\n        inputComponent: inputComponent,\n        className: classNames('PhoneInputInput', numberInputProps && numberInputProps.className, rest.className)\n      })));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    // `state` holds previous props as `props`, and also:\n    // * `country` — The currently selected country, e.g. `\"RU\"`.\n    // * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n    // * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n    // (and a couple of other less significant properties)\n    value: function getDerivedStateFromProps(props, state) {\n      return _objectSpread({\n        // Emulate `prevProps` via `state.props`.\n        props: props\n      }, getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state));\n    }\n  }]);\n  return PhoneNumberInput_;\n}(React.PureComponent); // This wrapper is only to `.forwardRef()` to the `<input/>`.\n\nvar PhoneNumberInput = React.forwardRef(function (props, ref) {\n  return React.createElement(PhoneNumberInput_, _extends({}, props, {\n    inputRef: ref\n  }));\n});\nPhoneNumberInput.propTypes = {\n  /**\n   * Phone number in `E.164` format.\n   *\n   * Example:\n   *\n   * `\"+12223333333\"`\n   */\n  value: PropTypes.string,\n  /**\n   * A function of `value: string?`.\n   *\n   * Updates the `value` property as the user inputs a phone number.\n   */\n  onChange: PropTypes.func.isRequired,\n  /**\n   * Toggles the `--focus` CSS class.\n   * @ignore\n   */\n  onFocus: PropTypes.func,\n  /**\n   * `onBlur` is usually passed by `redux-form`.\n   * @ignore\n   */\n  onBlur: PropTypes.func,\n  /**\n   * Set to `true` to disable both the phone number `<input/>`\n   * and the country `<select/>`.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Sets `autoComplete` property for phone number `<input/>`.\n   *\n   * Web browser's \"autocomplete\" feature\n   * remembers the phone number being input\n   * and can also autofill the `<input/>`\n   * with previously remembered phone numbers.\n   *\n   * https://developers.google.com\n   * /web/updates/2015/06/checkout-faster-with-autofill\n   *\n   * For example, can be used to turn it off:\n   *\n   * \"So when should you use `autocomplete=\"off\"`?\n   *  One example is when you've implemented your own version\n   *  of autocomplete for search. Another example is any form field\n   *  where users will input and submit different kinds of information\n   *  where it would not be useful to have the browser remember\n   *  what was submitted previously\".\n   */\n  // (is `\"tel\"` by default)\n  autoComplete: PropTypes.string.isRequired,\n  /**\n   * Set to `\"national\"` to show the initial `value` in\n   * \"national\" format rather than \"international\".\n   *\n   * For example, if `initialValueFormat` is `\"national\"`\n   * and the initial `value=\"+12133734253\"` is passed\n   * then the `<input/>` value will be `\"(213) 373-4253\"`.\n   *\n   * By default, `initialValueFormat` is `undefined`,\n   * meaning that if the initial `value=\"+12133734253\"` is passed\n   * then the `<input/>` value will be `\"+1 213 373 4253\"`.\n   *\n   * The reason for such default behaviour is that\n   * the newer generation grows up when there are no stationary phones\n   * and therefore everyone inputs phone numbers in international format\n   * in their smartphones so people gradually get more accustomed to\n   * writing phone numbers in international format rather than in local format.\n   * Future people won't be using \"national\" format, only \"international\".\n   */\n  // (is `undefined` by default)\n  initialValueFormat: PropTypes.oneOf(['national']),\n  // `displayInitialValueAsLocalNumber` property has been\n  // superceded by `initialValueFormat` property.\n  displayInitialValueAsLocalNumber: PropTypes.bool,\n  /**\n   * The country to be selected by default.\n   * For example, can be set after a GeoIP lookup.\n   *\n   * Example: `\"US\"`.\n   */\n  // A two-letter country code (\"ISO 3166-1 alpha-2\").\n  defaultCountry: PropTypes.string,\n  /**\n   * If specified, only these countries will be available for selection.\n   *\n   * Example:\n   *\n   * `[\"RU\", \"UA\", \"KZ\"]`\n   */\n  countries: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Custom country `<select/>` option names.\n   * Also some labels like \"ext\" and country `<select/>` `aria-label`.\n   *\n   * Example:\n   *\n   * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\n   *\n   * See the `locales` directory for examples.\n   */\n  labels: labelsPropType.isRequired,\n  /**\n   * Country `<select/>` options are sorted by their labels.\n   * The default sorting function uses `a.localeCompare(b, locales)`,\n   * and, if that's not available, falls back to simple `a > b` / `a < b`.\n   * Some languages, like Chinese, support multiple sorting variants\n   * (called \"collations\"), and the user might prefer one or another.\n   * Also, sometimes the Operating System language is not always\n   * the preferred language for a person using a website or an application,\n   * so there should be a way to specify custom locale.\n   * This `locales` property mimicks the `locales` argument of `Intl` constructors,\n   * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\n   */\n  locales: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]),\n  /*\n   * Custom country `<select/>` options sorting function.\n   * The default one uses `a.localeCompare(b)`, and,\n   * if that's not available, falls back to simple `a > b`/`a < b`.\n   * There have been requests to add custom sorter for cases\n   * like Chinese language and \"pinyin\" (non-default) sorting order.\n   * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\n  compareStrings: PropTypes.func,\n   */\n\n  /**\n   * A URL template of a country flag, where\n   * \"{XX}\" is a two-letter country code in upper case,\n   * or where \"{xx}\" is a two-letter country code in lower case.\n   * By default it points to `country-flag-icons` gitlab pages website.\n   * I imagine someone might want to download those country flag icons\n   * and host them on their own servers instead\n   * (all flags are available in the `country-flag-icons` library).\n   * There's a catch though: new countries may be added in future,\n   * so when hosting country flag icons on your own server\n   * one should check the `CHANGELOG.md` every time before updating this library,\n   * otherwise there's a possibility that some new country flag would be missing.\n   */\n  flagUrl: PropTypes.string.isRequired,\n  /**\n   * Custom country flag icon components.\n   * These flags will be used instead of the default ones.\n   * The the \"Flags\" section of the readme for more info.\n   *\n   * The shape is an object where keys are country codes\n   * and values are flag icon components.\n   * Flag icon components receive the same properties\n   * as `flagComponent` (see below).\n   *\n   * Example:\n   *\n   * `{ \"RU\": (props) => <img src=\"...\"/> }`\n   *\n   * Example:\n   *\n   * `import flags from 'country-flag-icons/react/3x2'`\n   *\n   * `import PhoneInput from 'react-phone-number-input'`\n   *\n   * `<PhoneInput flags={flags} .../>`\n   */\n  flags: PropTypes.objectOf(PropTypes.elementType),\n  /**\n   * Country flag icon component.\n   *\n   * Takes properties:\n   *\n   * * `country: string` — The country code.\n   * * `countryName: string` — The country name.\n   * * `flagUrl: string` — The `flagUrl` property (see above).\n   * * `flags: object` — The `flags` property (see above).\n   */\n  flagComponent: PropTypes.elementType.isRequired,\n  /**\n   * Set to `false` to remove the \"International\" option from country `<select/>`.\n   */\n  addInternationalOption: PropTypes.bool.isRequired,\n  /**\n   * \"International\" icon component.\n   * Should have the same aspect ratio.\n   *\n   * Receives properties:\n   *\n   * * `title: string` — \"International\" country option label.\n   */\n  internationalIcon: PropTypes.elementType.isRequired,\n  /**\n   * Can be used to place some countries on top of the list of country `<select/>` options.\n   *\n   * * `\"XX\"` — inserts an option for \"XX\" country.\n   * * `\"🌐\"` — inserts \"International\" option.\n   * * `\"|\"` — inserts a separator.\n   * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\n   *\n   * Example:\n   *\n   * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\n   */\n  countryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * `<Phone/>` component CSS style object.\n   */\n  style: PropTypes.object,\n  /**\n   * `<Phone/>` component CSS class.\n   */\n  className: PropTypes.string,\n  /**\n   * Country `<select/>` component.\n   *\n   * Receives properties:\n   *\n   * * `name: string?` — HTML `name` attribute.\n   * * `value: string?` — The currently selected country code.\n   * * `onChange(value: string?)` — Updates the `value`.\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n   * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\n   * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\n   * * `disabled: boolean?` — HTML `disabled` attribute.\n   * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\n   * * `className: string` — CSS class name.\n   */\n  countrySelectComponent: PropTypes.elementType.isRequired,\n  /**\n   * Country `<select/>` component props.\n   * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\n   * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\n   */\n  countrySelectProps: PropTypes.object,\n  /**\n   * Phone number `<input/>` component.\n   *\n   * Receives properties:\n   *\n   * * `value: string` — The formatted `value`.\n   * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\n   * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n   * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n   * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\n   *\n   * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\n   */\n  inputComponent: PropTypes.elementType.isRequired,\n  /**\n   * Wrapping `<div/>` component.\n   *\n   * Receives properties:\n   *\n   * * `style: object` — A component CSS style object.\n   * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\n   */\n  containerComponent: PropTypes.elementType.isRequired,\n  /**\n   * Phone number `<input/>` component props.\n   */\n  numberInputProps: PropTypes.object,\n  /**\n   * When the user attempts to insert a digit somewhere in the middle of a phone number,\n   * the caret position is moved right before the next available digit skipping\n   * any punctuation in between. This is called \"smart\" caret positioning.\n   * Another case would be the phone number format changing as a result of\n   * the user inserting the digit somewhere in the middle, which would require\n   * re-positioning the caret because all digit positions have changed.\n   * This \"smart\" caret positioning feature can be turned off by passing\n   * `smartCaret={false}` property: use it in case of any possible issues\n   * with caret position during phone number input.\n   */\n  // Is `true` by default.\n  smartCaret: PropTypes.bool.isRequired,\n  /**\n   * Set to `true` to force \"international\" phone number format.\n   * Set to `false` to force \"national\" phone number format.\n   * By default it's `undefined` meaning that it doesn't enforce any phone number format.\n   */\n  international: PropTypes.bool,\n  /**\n   * If set to `true`, the phone number input will get trimmed\n   * if it exceeds the maximum length for the country.\n   */\n  limitMaxLength: PropTypes.bool.isRequired,\n  /**\n   * If set to `false`, and `international` is `true`, then\n   * users won't be able to erase the \"country calling part\"\n   * of a phone number in the `<input/>`.\n   */\n  countryCallingCodeEditable: PropTypes.bool.isRequired,\n  /**\n   * `libphonenumber-js` metadata.\n   *\n   * Can be used to pass custom `libphonenumber-js` metadata\n   * to reduce the overall bundle size for those who compile \"custom\" metadata.\n   */\n  metadata: metadataPropType.isRequired,\n  /**\n   * Is called every time the selected country changes:\n   * either programmatically or when user selects it manually from the list.\n   */\n  // People have been asking for a way to get the selected country.\n  // @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n  // For some it's just a \"business requirement\".\n  // I guess it's about gathering as much info on the user as a website can\n  // without introducing any addional fields that would complicate the form\n  // therefore reducing \"conversion\" (that's a marketing term).\n  // Assuming that the phone number's country is the user's country\n  // is not 100% correct but in most cases I guess it's valid.\n  onCountryChange: PropTypes.func,\n  /**\n   * If set to `false`, will not focus the `<input/>` component\n   * when the user selects a country from the list of countries.\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\n   * Quote:\n   * \"On input: Changing the setting of any user interface component\n   *  does not automatically cause a change of context unless the user\n   *  has been advised of the behaviour before using the component.\"\n   */\n  focusInputOnCountrySelection: PropTypes.bool.isRequired\n};\nPhoneNumberInput.defaultProps = {\n  /**\n   * Remember (and autofill) the value as a phone number.\n   */\n  autoComplete: 'tel',\n  /**\n   * Country `<select/>` component.\n   */\n  countrySelectComponent: CountrySelect,\n  /**\n   * Flag icon component.\n   */\n  flagComponent: Flag,\n  /**\n   * By default, uses icons from `country-flag-icons` gitlab pages website.\n   */\n  // Must be equal to `flagUrl` in `./CountryIcon.js`.\n  flagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n  /**\n   * Default \"International\" country `<select/>` option icon.\n   */\n  internationalIcon: InternationalIcon,\n  /**\n   * Phone number `<input/>` component.\n   */\n  inputComponent: 'input',\n  /**\n   * Wrapping `<div/>` component.\n   */\n  containerComponent: 'div',\n  /**\n   * Some users requested a way to reset the component:\n   * both number `<input/>` and country `<select/>`.\n   * Whenever `reset` property changes both number `<input/>`\n   * and country `<select/>` are reset.\n   * It's not implemented as some instance `.reset()` method\n   * because `ref` is forwarded to `<input/>`.\n   * It's also not replaced with just resetting `country` on\n   * external `value` reset, because a user could select a country\n   * and then not input any `value`, and so the selected country\n   * would be \"stuck\", if not using this `reset` property.\n   */\n  // https://github.com/catamphetamine/react-phone-number-input/issues/300\n  reset: PropTypes.any,\n  /**\n   *\n   */\n\n  /**\n   * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\n   */\n  smartCaret: true,\n  /**\n   * Whether to add the \"International\" option\n   * to the list of countries.\n   */\n  addInternationalOption: true,\n  /**\n   * If set to `true` the phone number input will get trimmed\n   * if it exceeds the maximum length for the country.\n   */\n  limitMaxLength: false,\n  /**\n   * If set to `false`, and `international` is `true`, then\n   * users won't be able to erase the \"country calling part\"\n   * of a phone number in the `<input/>`.\n   */\n  countryCallingCodeEditable: true,\n  /**\n   * If set to `false`, will not focus the `<input/>` component\n   * when the user selects a country from the list of countries.\n   * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\n   * Quote:\n   * \"On input: Changing the setting of any user interface component\n   *  does not automatically cause a change of context unless the user\n   *  has been advised of the behaviour before using the component.\"\n   */\n  focusInputOnCountrySelection: true\n};\nexport default PhoneNumberInput;\nvar countrySelectOptionsMemo;\nvar countrySelectOptionsMemoDependencies;\nfunction useMemoCountrySelectOptions(generator, dependencies) {\n  if (!countrySelectOptionsMemoDependencies || !areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\n    countrySelectOptionsMemo = generator();\n    countrySelectOptionsMemoDependencies = dependencies;\n  }\n  return countrySelectOptionsMemo;\n}\nfunction areEqualArrays(a, b) {\n  if (a.length !== b.length) {\n    return false;\n  }\n  var i = 0;\n  while (i < a.length) {\n    if (a[i] !== b[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n}","map":{"version":3,"names":["React","PropTypes","classNames","InputSmart","InputBasic","CountrySelectWithIcon","CountrySelect","Flag","InternationalIcon","sortCountryOptions","isCountrySupportedWithError","getSupportedCountries","getSupportedCountryOptions","getCountries","createCountryIconComponent","metadata","metadataPropType","labels","labelsPropType","getPreSelectedCountry","getCountrySelectOptions","_getCountrySelectOptions","parsePhoneNumber","generateNationalNumberDigits","getPhoneDigitsForNewCountry","getInitialPhoneDigits","onPhoneDigitsChange","e164","getPhoneInputWithCountryStateUpdateFromNewProps","PhoneNumberInput_","props","_this","_classCallCheck","_possibleConstructorReturn","_getPrototypeOf","call","_defineProperty","_assertThisInitialized","createRef","instance","inputRef","current","ref","country","newCountry","_this$props","international","onChange","focusInputOnCountrySelection","_this$state","state","prevPhoneDigits","phoneDigits","prevCountry","newPhoneDigits","useNationalFormat","newValue","focus","setState","hasUserSelectedACountry","value","_phoneDigits","_this$props2","defaultCountry","addInternationalOption","limitMaxLength","countryCallingCodeEditable","_this$state2","countries","currentlySelectedCountry","_onPhoneDigitsChange","countryRequired","getAnyCountry","getFirstSupportedCountry","stateUpdate","forceRerender","isFocused","event","_onFocus","onFocus","onBlur","_onBlur","countrySelectProps","_this$props3","_value","_international","_addInternationalOption","displayInitialValueAsLocalNumber","initialValueFormat","_metadata","_this$props4","_defaultCountry","_countries","undefined","phoneNumber","CountryIcon","preSelectedCountry","required","onCountryChange","selectedCountry","prevProps","prevState","_ref","_this$props5","countryOptionsOrder","locales","useMemoCountrySelectOptions","countryNames","compareStringsLocales","_ref2","countryOptions","_this$props6","name","disabled","autoComplete","style","className","inputComponent","numberInputProps","smartCaret","CountrySelectComponent","countrySelectComponent","ContainerComponent","containerComponent","countriesProperty","flags","flagComponent","flagUrl","internationalIcon","reset","rest","_objectWithoutProperties","_this$state3","InputComponent","countrySelectOptions","createElement","_extends","concat","options","onCountryFocus","onCountryBlur","iconComponent","setInputRef","type","_objectSpread","PureComponent","PhoneNumberInput","forwardRef","propTypes","string","func","isRequired","bool","oneOf","arrayOf","oneOfType","objectOf","elementType","object","defaultProps","any","countrySelectOptionsMemo","countrySelectOptionsMemoDependencies","generator","dependencies","areEqualArrays","a","b","length","i"],"sources":["E:\\Hilighter\\chatbot\\node_modules\\react-phone-number-input-plus\\source\\PhoneInputWithCountry.js"],"sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\nimport classNames from 'classnames'\n\nimport InputSmart from './InputSmart'\nimport InputBasic from './InputBasic'\n\nimport { CountrySelectWithIcon as CountrySelect } from './CountrySelect'\n\nimport Flag from './Flag'\nimport InternationalIcon from './InternationalIcon'\n\nimport {\n\tsortCountryOptions,\n\tisCountrySupportedWithError,\n\tgetSupportedCountries,\n\tgetSupportedCountryOptions,\n\tgetCountries\n} from './helpers/countries'\n\nimport { createCountryIconComponent } from './CountryIcon'\n\nimport {\n\tmetadata as metadataPropType,\n\tlabels as labelsPropType\n} from './PropTypes'\n\nimport {\n\tgetPreSelectedCountry,\n\tgetCountrySelectOptions,\n\tparsePhoneNumber,\n\tgenerateNationalNumberDigits,\n\tgetPhoneDigitsForNewCountry,\n\tgetInitialPhoneDigits,\n\tonPhoneDigitsChange,\n\te164\n} from './helpers/phoneInputHelpers'\n\nimport getPhoneInputWithCountryStateUpdateFromNewProps from './helpers/getPhoneInputWithCountryStateUpdateFromNewProps'\n\nclass PhoneNumberInput_ extends React.PureComponent {\n\tinputRef = React.createRef()\n\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tconst {\n\t\t\tvalue,\n\t\t\tlabels,\n\t\t\tinternational,\n\t\t\taddInternationalOption,\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\n\t\t\t// superceded by `initialValueFormat` property.\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tinitialValueFormat,\n\t\t\tmetadata\n\t\t} = this.props\n\n\t\tlet {\n\t\t\tdefaultCountry,\n\t\t\tcountries\n\t\t} = this.props\n\n\t\t// Validate `defaultCountry`.\n\t\tif (defaultCountry) {\n\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\n\t\t\t\tdefaultCountry = undefined\n\t\t\t}\n\t\t}\n\n\t\t// Validate `countries`.\n\t\tcountries = getSupportedCountries(countries, metadata)\n\n\t\tconst phoneNumber = parsePhoneNumber(value, metadata)\n\n\t\tthis.CountryIcon = createCountryIconComponent(this.props)\n\n\t\tconst preSelectedCountry = getPreSelectedCountry({\n\t\t\tvalue,\n\t\t\tphoneNumber,\n\t\t\tdefaultCountry,\n\t\t\trequired: !addInternationalOption,\n\t\t\tcountries: countries || getCountries(metadata),\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\n\t\t\tmetadata\n\t\t})\n\n\t\tthis.state = {\n\t\t\t// Workaround for `this.props` inside `getDerivedStateFromProps()`.\n\t\t\tprops: this.props,\n\n\t\t\t// The country selected.\n\t\t\tcountry: preSelectedCountry,\n\n\t\t\t// `countries` are stored in `this.state` because they're filtered.\n\t\t\t// For example, a developer might theoretically pass some unsupported\n\t\t\t// countries as part of the `countries` property, and because of that\n\t\t\t// the component uses `this.state.countries` (which are filtered)\n\t\t\t// instead of `this.props.countries`\n\t\t\t// (which could potentially contain unsupported countries).\n\t\t\tcountries,\n\n\t\t\t// `phoneDigits` state property holds non-formatted user's input.\n\t\t\t// The reason is that there's no way of finding out\n\t\t\t// in which form should `value` be displayed: international or national.\n\t\t\t// E.g. if `value` is `+78005553535` then it could be input\n\t\t\t// by a user both as `8 (800) 555-35-35` and `+7 800 555 35 35`.\n\t\t\t// Hence storing just `value` is not sufficient for correct formatting.\n\t\t\t// E.g. if a user entered `8 (800) 555-35-35`\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `88005553535`\n\t\t\t// and if a user entered `+7 800 555 35 35`\n\t\t\t// then value is `+78005553535` and `phoneDigits` are `+78005553535`.\n\t\t\tphoneDigits: getInitialPhoneDigits({\n\t\t\t\tvalue,\n\t\t\t\tphoneNumber,\n\t\t\t\tdefaultCountry,\n\t\t\t\tinternational,\n\t\t\t\tuseNationalFormat: displayInitialValueAsLocalNumber || initialValueFormat === 'national',\n\t\t\t\tmetadata\n\t\t\t}),\n\n\t\t\t// `value` property is duplicated in state.\n\t\t\t// The reason is that `getDerivedStateFromProps()`\n\t\t\t// needs this `value` to compare to the new `value` property\n\t\t\t// to find out if `phoneDigits` needs updating:\n\t\t\t// If the `value` property was changed externally\n\t\t\t// then it won't be equal to `state.value`\n\t\t\t// in which case `phoneDigits` and `country` should be updated.\n\t\t\tvalue\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tconst { onCountryChange } = this.props\n\t\tlet { defaultCountry } = this.props\n\t\tconst { country: selectedCountry } = this.state\n\t\tif (onCountryChange) {\n\t\t\tif (defaultCountry) {\n\t\t\t\tif (!this.isCountrySupportedWithError(defaultCountry)) {\n\t\t\t\t\tdefaultCountry = undefined\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (selectedCountry !== defaultCountry) {\n\t\t\t\tonCountryChange(selectedCountry)\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentDidUpdate(prevProps, prevState) {\n\t\tconst { onCountryChange } = this.props\n\t\tconst { country } = this.state\n\t\t// Call `onCountryChange` when user selects another country.\n\t\tif (onCountryChange && country !== prevState.country) {\n\t\t\tonCountryChange(country)\n\t\t}\n\t}\n\n\tsetInputRef = (instance) => {\n\t\tthis.inputRef.current = instance\n\t\tconst { inputRef: ref } = this.props\n\t\tif (ref) {\n\t\t\tif (typeof ref === 'function') {\n\t\t\t\tref(instance)\n\t\t\t} else {\n\t\t\t\tref.current = instance\n\t\t\t}\n\t\t}\n\t}\n\n\tgetCountrySelectOptions({ countries }) {\n\t\tconst {\n\t\t\tinternational,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tcountryOptionsOrder,\n\t\t\taddInternationalOption,\n\t\t\tlabels,\n\t\t\tlocales,\n\t\t\tmetadata\n\t\t} = this.props\n\t\treturn useMemoCountrySelectOptions(() => {\n\t\t\treturn sortCountryOptions(\n\t\t\t\tgetCountrySelectOptions({\n\t\t\t\t\tcountries: countries || getCountries(metadata),\n\t\t\t\t\tcountryNames: labels,\n\t\t\t\t\taddInternationalOption: (international && countryCallingCodeEditable === false) ? false : addInternationalOption,\n\t\t\t\t\tcompareStringsLocales: locales,\n\t\t\t\t\t// compareStrings\n\t\t\t\t}),\n\t\t\t\tgetSupportedCountryOptions(countryOptionsOrder, metadata)\n\t\t\t)\n\t\t}, [\n\t\t\tcountries,\n\t\t\tcountryOptionsOrder,\n\t\t\taddInternationalOption,\n\t\t\tlabels,\n\t\t\tmetadata\n\t\t])\n\t}\n\n\tgetFirstSupportedCountry({ countries }) {\n\t\tconst countryOptions = this.getCountrySelectOptions({ countries })\n\t\treturn countryOptions[0].value\n\t}\n\n\t// A shorthand for not passing `metadata` as a second argument.\n\tisCountrySupportedWithError = (country) => {\n\t\tconst { metadata } = this.props\n\t\treturn isCountrySupportedWithError(country, metadata)\n\t}\n\n\t// Country `<select/>` `onChange` handler.\n\tonCountryChange = (newCountry) => {\n\t\tconst {\n\t\t\tinternational,\n\t\t\tmetadata,\n\t\t\tonChange,\n\t\t\tfocusInputOnCountrySelection\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tphoneDigits: prevPhoneDigits,\n\t\t\tcountry: prevCountry\n\t\t} = this.state\n\n\t\t// After the new `country` has been selected,\n\t\t// if the phone number `<input/>` holds any digits\n\t\t// then migrate those digits for the new `country`.\n\t\tconst newPhoneDigits = getPhoneDigitsForNewCountry(prevPhoneDigits, {\n\t\t\tprevCountry,\n\t\t\tnewCountry,\n\t\t\tmetadata,\n\t\t\t// Convert the phone number to \"national\" format\n\t\t\t// when the user changes the selected country by hand.\n\t\t\tuseNationalFormat: !international\n\t\t})\n\n\t\tconst newValue = e164(newPhoneDigits, newCountry, metadata)\n\n\t\t// Focus phone number `<input/>` upon country selection.\n\t\tif (focusInputOnCountrySelection) {\n\t\t\tthis.inputRef.current.focus()\n\t\t}\n\n\t\t// If the user has already manually selected a country\n\t\t// then don't override that already selected country\n\t\t// if the `defaultCountry` property changes.\n\t\t// That's what `hasUserSelectedACountry` flag is for.\n\n\t\tthis.setState({\n\t\t\tcountry: newCountry,\n\t\t\thasUserSelectedACountry: true,\n\t\t\tphoneDigits: newPhoneDigits,\n\t\t\tvalue: newValue\n\t\t},\n\t\t() => {\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\tonChange(newValue)\n\t\t})\n\t}\n\n\t/**\n\t * `<input/>` `onChange()` handler.\n\t * Updates `value` property accordingly (so that they are kept in sync).\n\t * @param {string?} input — Either a parsed phone number or an empty string. Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t */\n\tonChange = (_phoneDigits) => {\n\t\tconst {\n\t\t\tdefaultCountry,\n\t\t\tonChange,\n\t\t\taddInternationalOption,\n\t\t\tinternational,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tmetadata\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tcountries,\n\t\t\tphoneDigits: prevPhoneDigits,\n\t\t\tcountry: currentlySelectedCountry\n\t\t} = this.state\n\n\t\tconst {\n\t\t\tphoneDigits,\n\t\t\tcountry,\n\t\t\tvalue\n\t\t} = onPhoneDigitsChange(_phoneDigits, {\n\t\t\tprevPhoneDigits,\n\t\t\tcountry: currentlySelectedCountry,\n\t\t\tcountryRequired: !addInternationalOption,\n\t\t\tdefaultCountry,\n\t\t\tgetAnyCountry: () => this.getFirstSupportedCountry({ countries }),\n\t\t\tcountries,\n\t\t\tinternational,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tmetadata\n\t\t})\n\n\t\tconst stateUpdate = {\n\t\t\tphoneDigits,\n\t\t\tvalue,\n\t\t\tcountry\n\t\t}\n\n\t\tif (countryCallingCodeEditable === false) {\n\t\t\t// If it simply did `setState({ phoneDigits: intlPrefix })` here,\n\t\t\t// then it would have no effect when erasing an inital international prefix\n\t\t\t// via Backspace, because `phoneDigits` in `state` wouldn't change\n\t\t\t// as a result, because it was `prefix` and it became `prefix`,\n\t\t\t// so the component wouldn't rerender, and the user would be able\n\t\t\t// to erase the country calling code part, and that part is\n\t\t\t// assumed to be non-eraseable. That's why the component is\n\t\t\t// forcefully rerendered here.\n\t\t\t// https://github.com/catamphetamine/react-phone-number-input/issues/367#issuecomment-721703501\n\t\t\tif (!value && phoneDigits === this.state.phoneDigits) {\n\t\t\t\t// Force a re-render of the `<input/>` in order to reset its value.\n\t\t\t\tstateUpdate.forceRerender = {}\n\t\t\t}\n\t\t}\n\n\t\tthis.setState(\n\t\t\tstateUpdate,\n\t\t\t// Update the new `value` property.\n\t\t\t// Doing it after the `state` has been updated\n\t\t\t// because `onChange()` will trigger `getDerivedStateFromProps()`\n\t\t\t// with the new `value` which will be compared to `state.value` there.\n\t\t\t() => onChange(value)\n\t\t)\n\t}\n\n\t// Toggles the `--focus` CSS class.\n\t_onFocus = () => this.setState({ isFocused: true })\n\n\t// Toggles the `--focus` CSS class.\n\t_onBlur = () => this.setState({ isFocused: false })\n\n\tonFocus = (event) => {\n\t\tthis._onFocus()\n\t\tconst { onFocus } = this.props\n\t\tif (onFocus) {\n\t\t\tonFocus(event)\n\t\t}\n\t}\n\n\tonBlur = (event) => {\n\t\tconst { onBlur } = this.props\n\t\tthis._onBlur()\n\t\tif (onBlur) {\n\t\t\tonBlur(event)\n\t\t}\n\t}\n\n\tonCountryFocus = (event) => {\n\t\tthis._onFocus()\n\t\t// this.setState({ countrySelectFocused: true })\n\t\tconst { countrySelectProps } = this.props\n\t\tif (countrySelectProps) {\n\t\t\tconst { onFocus } = countrySelectProps\n\t\t\tif (onFocus) {\n\t\t\t\tonFocus(event)\n\t\t\t}\n\t\t}\n\t}\n\n\tonCountryBlur = (event) => {\n\t\tthis._onBlur()\n\t\t// this.setState({ countrySelectFocused: false })\n\t\tconst { countrySelectProps } = this.props\n\t\tif (countrySelectProps) {\n\t\t\tconst { onBlur } = countrySelectProps\n\t\t\tif (onBlur) {\n\t\t\t\tonBlur(event)\n\t\t\t}\n\t\t}\n\t}\n\n\t// `state` holds previous props as `props`, and also:\n\t// * `country` — The currently selected country, e.g. `\"RU\"`.\n\t// * `value` — The currently entered phone number (E.164), e.g. `+78005553535`.\n\t// * `phoneDigits` — The parsed `<input/>` value, e.g. `8005553535`.\n\t// (and a couple of other less significant properties)\n\tstatic getDerivedStateFromProps(props, state) {\n\t\treturn {\n\t\t\t// Emulate `prevProps` via `state.props`.\n\t\t\tprops,\n\t\t\t...getPhoneInputWithCountryStateUpdateFromNewProps(props, state.props, state)\n\t\t}\n\t}\n\n\trender() {\n\t\tconst {\n\t\t\t// Generic HTML attributes.\n\t\t\tname,\n\t\t\tdisabled,\n\t\t\tautoComplete,\n\t\t\tstyle,\n\t\t\tclassName,\n\n\t\t\t// Number `<input/>` properties.\n\t\t\tinputRef,\n\t\t\tinputComponent,\n\t\t\tnumberInputProps,\n\t\t\tsmartCaret,\n\n\t\t\t// Country `<select/>` properties.\n\t\t\tcountrySelectComponent: CountrySelectComponent,\n\t\t\tcountrySelectProps,\n\n\t\t\t// Container `<div/>` properties.\n\t\t\tcontainerComponent: ContainerComponent,\n\n\t\t\t// Get \"rest\" properties (passed through to number `<input/>`).\n\t\t\tdefaultCountry,\n\t\t\tcountries: countriesProperty,\n\t\t\tcountryOptionsOrder,\n\t\t\tlabels,\n\t\t\tflags,\n\t\t\tflagComponent,\n\t\t\tflagUrl,\n\t\t\taddInternationalOption,\n\t\t\tinternationalIcon,\n\t\t\t// `displayInitialValueAsLocalNumber` property has been\n\t\t\t// superceded by `initialValueFormat` property.\n\t\t\tdisplayInitialValueAsLocalNumber,\n\t\t\tinitialValueFormat,\n\t\t\tonCountryChange,\n\t\t\tlimitMaxLength,\n\t\t\tcountryCallingCodeEditable,\n\t\t\tfocusInputOnCountrySelection,\n\t\t\treset,\n\t\t\tmetadata,\n\t\t\tinternational,\n\t\t\tlocales,\n\t\t\t// compareStrings,\n\t\t\t...rest\n\t\t} = this.props\n\n\t\tconst {\n\t\t\tcountry,\n\t\t\tcountries,\n\t\t\tphoneDigits,\n\t\t\tisFocused\n\t\t} = this.state\n\n\t\tconst InputComponent = smartCaret ? InputSmart : InputBasic\n\n\t\tconst countrySelectOptions = this.getCountrySelectOptions({ countries })\n\n\t\treturn (\n\t\t\t<ContainerComponent\n\t\t\t\tstyle={style}\n\t\t\t\tclassName={classNames(className, 'PhoneInput', {\n\t\t\t\t\t'PhoneInput--focus': isFocused\n\t\t\t\t})}>\n\n\t\t\t\t{/* Country `<select/>` */}\n\t\t\t\t<CountrySelectComponent\n\t\t\t\t\tname={name ? `${name}Country` : undefined}\n\t\t\t\t\taria-label={labels.country}\n\t\t\t\t\t{...countrySelectProps}\n\t\t\t\t\tvalue={country}\n\t\t\t\t\toptions={countrySelectOptions}\n\t\t\t\t\tonChange={this.onCountryChange}\n\t\t\t\t\tonFocus={this.onCountryFocus}\n\t\t\t\t\tonBlur={this.onCountryBlur}\n\t\t\t\t\tdisabled={disabled || (countrySelectProps && countrySelectProps.disabled)}\n\t\t\t\t\ticonComponent={this.CountryIcon}/>\n\n\t\t\t\t{/* Phone number `<input/>` */}\n\t\t\t\t<InputComponent\n\t\t\t\t\tref={this.setInputRef}\n\t\t\t\t\ttype=\"tel\"\n\t\t\t\t\tautoComplete={autoComplete}\n\t\t\t\t\t{...numberInputProps}\n\t\t\t\t\t{...rest}\n\t\t\t\t\tname={name}\n\t\t\t\t\tmetadata={metadata}\n\t\t\t\t\tcountry={country}\n\t\t\t\t\tvalue={phoneDigits || ''}\n\t\t\t\t\tonChange={this.onChange}\n\t\t\t\t\tonFocus={this.onFocus}\n\t\t\t\t\tonBlur={this.onBlur}\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\tinputComponent={inputComponent}\n\t\t\t\t\tclassName={classNames(\n\t\t\t\t\t\t'PhoneInputInput',\n\t\t\t\t\t\tnumberInputProps && numberInputProps.className,\n\t\t\t\t\t\trest.className\n\t\t\t\t\t)}/>\n\t\t\t</ContainerComponent>\n\t\t)\n\t}\n}\n\n// This wrapper is only to `.forwardRef()` to the `<input/>`.\nconst PhoneNumberInput = React.forwardRef((props, ref) => (\n\t<PhoneNumberInput_ {...props} inputRef={ref}/>\n))\n\nPhoneNumberInput.propTypes = {\n\t/**\n\t * Phone number in `E.164` format.\n\t *\n\t * Example:\n\t *\n\t * `\"+12223333333\"`\n\t */\n\tvalue: PropTypes.string,\n\n\t/**\n\t * A function of `value: string?`.\n\t *\n\t * Updates the `value` property as the user inputs a phone number.\n\t */\n\tonChange: PropTypes.func.isRequired,\n\n\t/**\n\t * Toggles the `--focus` CSS class.\n\t * @ignore\n\t */\n\tonFocus: PropTypes.func,\n\n\t/**\n\t * `onBlur` is usually passed by `redux-form`.\n\t * @ignore\n\t */\n\tonBlur: PropTypes.func,\n\n\t/**\n\t * Set to `true` to disable both the phone number `<input/>`\n\t * and the country `<select/>`.\n\t */\n\tdisabled: PropTypes.bool,\n\n\t/**\n\t * Sets `autoComplete` property for phone number `<input/>`.\n\t *\n\t * Web browser's \"autocomplete\" feature\n\t * remembers the phone number being input\n\t * and can also autofill the `<input/>`\n\t * with previously remembered phone numbers.\n\t *\n\t * https://developers.google.com\n\t * /web/updates/2015/06/checkout-faster-with-autofill\n\t *\n\t * For example, can be used to turn it off:\n\t *\n\t * \"So when should you use `autocomplete=\"off\"`?\n\t *  One example is when you've implemented your own version\n\t *  of autocomplete for search. Another example is any form field\n\t *  where users will input and submit different kinds of information\n\t *  where it would not be useful to have the browser remember\n\t *  what was submitted previously\".\n\t */\n\t// (is `\"tel\"` by default)\n\tautoComplete: PropTypes.string.isRequired,\n\n\t/**\n\t * Set to `\"national\"` to show the initial `value` in\n\t * \"national\" format rather than \"international\".\n\t *\n\t * For example, if `initialValueFormat` is `\"national\"`\n\t * and the initial `value=\"+12133734253\"` is passed\n\t * then the `<input/>` value will be `\"(213) 373-4253\"`.\n\t *\n\t * By default, `initialValueFormat` is `undefined`,\n\t * meaning that if the initial `value=\"+12133734253\"` is passed\n\t * then the `<input/>` value will be `\"+1 213 373 4253\"`.\n\t *\n\t * The reason for such default behaviour is that\n\t * the newer generation grows up when there are no stationary phones\n\t * and therefore everyone inputs phone numbers in international format\n\t * in their smartphones so people gradually get more accustomed to\n\t * writing phone numbers in international format rather than in local format.\n\t * Future people won't be using \"national\" format, only \"international\".\n\t */\n\t// (is `undefined` by default)\n\tinitialValueFormat: PropTypes.oneOf(['national']),\n\n\t// `displayInitialValueAsLocalNumber` property has been\n\t// superceded by `initialValueFormat` property.\n\tdisplayInitialValueAsLocalNumber: PropTypes.bool,\n\n\t/**\n\t * The country to be selected by default.\n\t * For example, can be set after a GeoIP lookup.\n\t *\n\t * Example: `\"US\"`.\n\t */\n\t// A two-letter country code (\"ISO 3166-1 alpha-2\").\n\tdefaultCountry: PropTypes.string,\n\n\t/**\n\t * If specified, only these countries will be available for selection.\n\t *\n\t * Example:\n\t *\n\t * `[\"RU\", \"UA\", \"KZ\"]`\n\t */\n\tcountries: PropTypes.arrayOf(PropTypes.string),\n\n\t/**\n\t * Custom country `<select/>` option names.\n\t * Also some labels like \"ext\" and country `<select/>` `aria-label`.\n\t *\n\t * Example:\n\t *\n\t * `{ \"ZZ\": \"Международный\", RU: \"Россия\", US: \"США\", ... }`\n\t *\n\t * See the `locales` directory for examples.\n\t */\n\tlabels: labelsPropType.isRequired,\n\n\t/**\n\t * Country `<select/>` options are sorted by their labels.\n\t * The default sorting function uses `a.localeCompare(b, locales)`,\n\t * and, if that's not available, falls back to simple `a > b` / `a < b`.\n\t * Some languages, like Chinese, support multiple sorting variants\n\t * (called \"collations\"), and the user might prefer one or another.\n\t * Also, sometimes the Operating System language is not always\n\t * the preferred language for a person using a website or an application,\n\t * so there should be a way to specify custom locale.\n\t * This `locales` property mimicks the `locales` argument of `Intl` constructors,\n\t * and can be either a Unicode BCP 47 locale identifier or an array of such locale identifiers.\n\t * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument\n\t */\n\tlocales: PropTypes.oneOfType([\n\t\tPropTypes.string,\n\t\tPropTypes.arrayOf(PropTypes.string)\n\t]),\n\n\t/*\n\t * Custom country `<select/>` options sorting function.\n\t * The default one uses `a.localeCompare(b)`, and,\n\t * if that's not available, falls back to simple `a > b`/`a < b`.\n\t * There have been requests to add custom sorter for cases\n\t * like Chinese language and \"pinyin\" (non-default) sorting order.\n\t * https://stackoverflow.com/questions/22907288/chinese-sorting-by-pinyin-in-javascript-with-localecompare\n\tcompareStrings: PropTypes.func,\n\t */\n\n\t/**\n\t * A URL template of a country flag, where\n\t * \"{XX}\" is a two-letter country code in upper case,\n\t * or where \"{xx}\" is a two-letter country code in lower case.\n\t * By default it points to `country-flag-icons` gitlab pages website.\n\t * I imagine someone might want to download those country flag icons\n\t * and host them on their own servers instead\n\t * (all flags are available in the `country-flag-icons` library).\n\t * There's a catch though: new countries may be added in future,\n\t * so when hosting country flag icons on your own server\n\t * one should check the `CHANGELOG.md` every time before updating this library,\n\t * otherwise there's a possibility that some new country flag would be missing.\n\t */\n\tflagUrl: PropTypes.string.isRequired,\n\n\t/**\n\t * Custom country flag icon components.\n\t * These flags will be used instead of the default ones.\n\t * The the \"Flags\" section of the readme for more info.\n\t *\n\t * The shape is an object where keys are country codes\n\t * and values are flag icon components.\n\t * Flag icon components receive the same properties\n\t * as `flagComponent` (see below).\n\t *\n\t * Example:\n\t *\n\t * `{ \"RU\": (props) => <img src=\"...\"/> }`\n\t *\n\t * Example:\n\t *\n\t * `import flags from 'country-flag-icons/react/3x2'`\n\t *\n\t * `import PhoneInput from 'react-phone-number-input'`\n\t *\n\t * `<PhoneInput flags={flags} .../>`\n\t */\n\tflags: PropTypes.objectOf(PropTypes.elementType),\n\n\t/**\n\t * Country flag icon component.\n\t *\n\t * Takes properties:\n\t *\n\t * * `country: string` — The country code.\n\t * * `countryName: string` — The country name.\n\t * * `flagUrl: string` — The `flagUrl` property (see above).\n\t * * `flags: object` — The `flags` property (see above).\n\t */\n\tflagComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Set to `false` to remove the \"International\" option from country `<select/>`.\n\t */\n\taddInternationalOption: PropTypes.bool.isRequired,\n\n\t/**\n\t * \"International\" icon component.\n\t * Should have the same aspect ratio.\n\t *\n\t * Receives properties:\n\t *\n\t * * `title: string` — \"International\" country option label.\n\t */\n\tinternationalIcon: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Can be used to place some countries on top of the list of country `<select/>` options.\n\t *\n\t * * `\"XX\"` — inserts an option for \"XX\" country.\n\t * * `\"🌐\"` — inserts \"International\" option.\n\t * * `\"|\"` — inserts a separator.\n\t * * `\"...\"` — inserts options for the rest of the countries (can be omitted, in which case it will be automatically added at the end).\n\t *\n\t * Example:\n\t *\n\t * `[\"US\", \"CA\", \"AU\", \"|\", \"...\"]`\n\t */\n\tcountryOptionsOrder: PropTypes.arrayOf(PropTypes.string),\n\n\t/**\n\t * `<Phone/>` component CSS style object.\n\t */\n\tstyle: PropTypes.object,\n\n\t/**\n\t * `<Phone/>` component CSS class.\n\t */\n\tclassName: PropTypes.string,\n\n\t/**\n\t * Country `<select/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `name: string?` — HTML `name` attribute.\n\t * * `value: string?` — The currently selected country code.\n\t * * `onChange(value: string?)` — Updates the `value`.\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t * * `options: object[]` — The list of all selectable countries (including \"International\") each being an object of shape `{ value: string?, label: string }`.\n\t * * `iconComponent: PropTypes.elementType` — React component that renders a country icon: `<Icon country={value}/>`. If `country` is `undefined` then it renders an \"International\" icon.\n\t * * `disabled: boolean?` — HTML `disabled` attribute.\n\t * * `tabIndex: (number|string)?` — HTML `tabIndex` attribute.\n\t * * `className: string` — CSS class name.\n\t */\n\tcountrySelectComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Country `<select/>` component props.\n\t * Along with the usual DOM properties such as `aria-label` and `tabIndex`,\n\t * some custom properties are supported, such as `arrowComponent` and `unicodeFlags`.\n\t */\n\tcountrySelectProps: PropTypes.object,\n\n\t/**\n\t * Phone number `<input/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `value: string` — The formatted `value`.\n\t * * `onChange(event: Event)` — Updates the formatted `value` from `event.target.value`.\n\t * * `onFocus()` — Is used to toggle the `--focus` CSS class.\n\t * * `onBlur()` — Is used to toggle the `--focus` CSS class.\n\t * * Other properties like `type=\"tel\"` or `autoComplete=\"tel\"` that should be passed through to the DOM `<input/>`.\n\t *\n\t * Must also either use `React.forwardRef()` to \"forward\" `ref` to the `<input/>` or implement `.focus()` method.\n\t */\n\tinputComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Wrapping `<div/>` component.\n\t *\n\t * Receives properties:\n\t *\n\t * * `style: object` — A component CSS style object.\n\t * * `className: string` — Classes to attach to the component, typically changes when component focuses or blurs.\n\t */\n\tcontainerComponent: PropTypes.elementType.isRequired,\n\n\t/**\n\t * Phone number `<input/>` component props.\n\t */\n\tnumberInputProps: PropTypes.object,\n\n\t/**\n\t * When the user attempts to insert a digit somewhere in the middle of a phone number,\n\t * the caret position is moved right before the next available digit skipping\n\t * any punctuation in between. This is called \"smart\" caret positioning.\n\t * Another case would be the phone number format changing as a result of\n\t * the user inserting the digit somewhere in the middle, which would require\n\t * re-positioning the caret because all digit positions have changed.\n\t * This \"smart\" caret positioning feature can be turned off by passing\n\t * `smartCaret={false}` property: use it in case of any possible issues\n\t * with caret position during phone number input.\n\t */\n\t// Is `true` by default.\n\tsmartCaret: PropTypes.bool.isRequired,\n\n\t/**\n\t * Set to `true` to force \"international\" phone number format.\n\t * Set to `false` to force \"national\" phone number format.\n\t * By default it's `undefined` meaning that it doesn't enforce any phone number format.\n\t */\n\tinternational: PropTypes.bool,\n\n\t/**\n\t * If set to `true`, the phone number input will get trimmed\n\t * if it exceeds the maximum length for the country.\n\t */\n\tlimitMaxLength: PropTypes.bool.isRequired,\n\n\t/**\n\t * If set to `false`, and `international` is `true`, then\n\t * users won't be able to erase the \"country calling part\"\n\t * of a phone number in the `<input/>`.\n\t */\n\tcountryCallingCodeEditable: PropTypes.bool.isRequired,\n\n\t/**\n\t * `libphonenumber-js` metadata.\n\t *\n\t * Can be used to pass custom `libphonenumber-js` metadata\n\t * to reduce the overall bundle size for those who compile \"custom\" metadata.\n\t */\n\tmetadata: metadataPropType.isRequired,\n\n\t/**\n\t * Is called every time the selected country changes:\n\t * either programmatically or when user selects it manually from the list.\n\t */\n\t// People have been asking for a way to get the selected country.\n\t// @see  https://github.com/catamphetamine/react-phone-number-input/issues/128\n\t// For some it's just a \"business requirement\".\n\t// I guess it's about gathering as much info on the user as a website can\n\t// without introducing any addional fields that would complicate the form\n\t// therefore reducing \"conversion\" (that's a marketing term).\n\t// Assuming that the phone number's country is the user's country\n\t// is not 100% correct but in most cases I guess it's valid.\n\tonCountryChange: PropTypes.func,\n\n\t/**\n\t * If set to `false`, will not focus the `<input/>` component\n\t * when the user selects a country from the list of countries.\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\n\t * Quote:\n\t * \"On input: Changing the setting of any user interface component\n\t *  does not automatically cause a change of context unless the user\n\t *  has been advised of the behaviour before using the component.\"\n\t */\n\tfocusInputOnCountrySelection: PropTypes.bool.isRequired\n}\n\nPhoneNumberInput.defaultProps = {\n\t/**\n\t * Remember (and autofill) the value as a phone number.\n\t */\n\tautoComplete: 'tel',\n\n\t/**\n\t * Country `<select/>` component.\n\t */\n\tcountrySelectComponent: CountrySelect,\n\n\t/**\n\t * Flag icon component.\n\t */\n\tflagComponent: Flag,\n\n\t/**\n\t * By default, uses icons from `country-flag-icons` gitlab pages website.\n\t */\n\t// Must be equal to `flagUrl` in `./CountryIcon.js`.\n\tflagUrl: 'https://purecatamphetamine.github.io/country-flag-icons/3x2/{XX}.svg',\n\n\t/**\n\t * Default \"International\" country `<select/>` option icon.\n\t */\n\tinternationalIcon: InternationalIcon,\n\n\t/**\n\t * Phone number `<input/>` component.\n\t */\n\tinputComponent: 'input',\n\n\t/**\n\t * Wrapping `<div/>` component.\n\t */\n\tcontainerComponent: 'div',\n\n\t/**\n\t * Some users requested a way to reset the component:\n\t * both number `<input/>` and country `<select/>`.\n\t * Whenever `reset` property changes both number `<input/>`\n\t * and country `<select/>` are reset.\n\t * It's not implemented as some instance `.reset()` method\n\t * because `ref` is forwarded to `<input/>`.\n\t * It's also not replaced with just resetting `country` on\n\t * external `value` reset, because a user could select a country\n\t * and then not input any `value`, and so the selected country\n\t * would be \"stuck\", if not using this `reset` property.\n\t */\n\t// https://github.com/catamphetamine/react-phone-number-input/issues/300\n\treset: PropTypes.any,\n\n\t/**\n\t *\n\t */\n\n\t/**\n\t * Set to `false` to use \"basic\" caret instead of the \"smart\" one.\n\t */\n\tsmartCaret: true,\n\n\t/**\n\t * Whether to add the \"International\" option\n\t * to the list of countries.\n\t */\n\taddInternationalOption: true,\n\n\t/**\n\t * If set to `true` the phone number input will get trimmed\n\t * if it exceeds the maximum length for the country.\n\t */\n\tlimitMaxLength: false,\n\n\t/**\n\t * If set to `false`, and `international` is `true`, then\n\t * users won't be able to erase the \"country calling part\"\n\t * of a phone number in the `<input/>`.\n\t */\n\tcountryCallingCodeEditable: true,\n\n\t/**\n\t * If set to `false`, will not focus the `<input/>` component\n\t * when the user selects a country from the list of countries.\n\t * This can be used to conform to the Web Content Accessibility Guidelines (WCAG).\n\t * Quote:\n\t * \"On input: Changing the setting of any user interface component\n\t *  does not automatically cause a change of context unless the user\n\t *  has been advised of the behaviour before using the component.\"\n\t */\n\tfocusInputOnCountrySelection: true\n}\n\nexport default PhoneNumberInput\n\nlet countrySelectOptionsMemo\nlet countrySelectOptionsMemoDependencies\nfunction useMemoCountrySelectOptions(generator, dependencies) {\n\tif (!countrySelectOptionsMemoDependencies ||\n\t\t!areEqualArrays(dependencies, countrySelectOptionsMemoDependencies)) {\n\t\tcountrySelectOptionsMemo = generator()\n\t\tcountrySelectOptionsMemoDependencies = dependencies\n\t}\n\treturn countrySelectOptionsMemo\n}\n\nfunction areEqualArrays(a, b) {\n\tif (a.length !== b.length) {\n\t\treturn false\n\t}\n\tlet i = 0\n\twhile (i < a.length) {\n\t\tif (a[i] !== b[i]) {\n\t\t\treturn false\n\t\t}\n\t\ti++\n\t}\n\treturn true\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}