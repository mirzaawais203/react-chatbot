{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nimport React, { useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Input from 'input-format/react';\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core';\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix';\nexport function createInput(defaultMetadata) {\n  /**\n   * `InputSmart` is a \"smarter\" implementation of a `Component`\n   * that can be passed to `<PhoneInput/>`. It parses and formats\n   * the user's and maintains the caret's position in the process.\n   * The caret positioning is maintained using `input-format` library.\n   * Relies on being run in a DOM environment for calling caret positioning functions.\n   */\n  function InputSmart(_ref, ref) {\n    var country = _ref.country,\n      international = _ref.international,\n      withCountryCallingCode = _ref.withCountryCallingCode,\n      metadata = _ref.metadata,\n      rest = _objectWithoutProperties(_ref, [\"country\", \"international\", \"withCountryCallingCode\", \"metadata\"]);\n    var format = useCallback(function (value) {\n      // \"As you type\" formatter.\n      var formatter = new AsYouType(country, metadata);\n      var prefix = getInputValuePrefix({\n        country: country,\n        international: international,\n        withCountryCallingCode: withCountryCallingCode,\n        metadata: metadata\n      }); // Format the number.\n\n      var text = formatter.input(prefix + value);\n      var template = formatter.getTemplate();\n      if (prefix) {\n        text = removeInputValuePrefix(text, prefix); // `AsYouType.getTemplate()` can be `undefined`.\n\n        if (template) {\n          template = removeInputValuePrefix(template, prefix);\n        }\n      }\n      return {\n        text: text,\n        template: template\n      };\n    }, [country, metadata]);\n    return React.createElement(Input, _extends({}, rest, {\n      ref: ref,\n      parse: parsePhoneNumberCharacter,\n      format: format\n    }));\n  }\n  InputSmart = React.forwardRef(InputSmart);\n  InputSmart.propTypes = {\n    /**\n     * The parsed phone number.\n     * \"Parsed\" not in a sense of \"E.164\"\n     * but rather in a sense of \"having only\n     * digits and possibly a leading plus character\".\n     * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n     */\n    value: PropTypes.string.isRequired,\n    /**\n     * A function of `value: string`.\n     * Updates the `value` property.\n     */\n    onChange: PropTypes.func.isRequired,\n    /**\n     * A two-letter country code for formatting `value`\n     * as a national phone number (e.g. `(800) 555 35 35`).\n     * E.g. \"US\", \"RU\", etc.\n     * If no `country` is passed then `value`\n     * is formatted as an international phone number.\n     * (e.g. `+7 800 555 35 35`)\n     * Perhaps the `country` property should have been called `defaultCountry`\n     * because if `value` is an international number then `country` is ignored.\n     */\n    country: PropTypes.string,\n    /**\n     * If `country` property is passed along with `international={true}` property\n     * then the phone number will be input in \"international\" format for that `country`\n     * (without \"country calling code\").\n     * For example, if `country=\"US\"` property is passed to \"without country select\" input\n     * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\n     * But if both `country=\"US\"` and `international={true}` properties are passed then\n     * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\n     * (without \"country calling code\" `+1`).\n     */\n    international: PropTypes.bool,\n    /**\n     * If `country` and `international` properties are set,\n     * then by default it won't include \"country calling code\" in the input field.\n     * To change that, pass `withCountryCallingCode` property,\n     * and it will include \"country calling code\" in the input field.\n     */\n    withCountryCallingCode: PropTypes.bool,\n    /**\n     * `libphonenumber-js` metadata.\n     */\n    metadata: PropTypes.object.isRequired\n  };\n  InputSmart.defaultProps = {\n    metadata: defaultMetadata\n  };\n  return InputSmart;\n}\nexport default createInput();","map":{"version":3,"names":["React","useCallback","PropTypes","Input","AsYouType","parsePhoneNumberCharacter","getInputValuePrefix","removeInputValuePrefix","createInput","defaultMetadata","InputSmart","_ref","ref","country","international","withCountryCallingCode","metadata","rest","_objectWithoutProperties","format","value","formatter","prefix","text","input","template","getTemplate","createElement","_extends","parse","forwardRef","propTypes","string","isRequired","onChange","func","bool","object","defaultProps"],"sources":["E:\\Hilighter\\chatbot\\node_modules\\react-phone-number-input-plus\\source\\InputSmart.js"],"sourcesContent":["import React, { useCallback } from 'react'\nimport PropTypes from 'prop-types'\nimport Input from 'input-format/react'\nimport { AsYouType, parsePhoneNumberCharacter } from 'libphonenumber-js/core'\n\nimport { getInputValuePrefix, removeInputValuePrefix } from './helpers/inputValuePrefix'\n\nexport function createInput(defaultMetadata)\n{\n\t/**\n\t * `InputSmart` is a \"smarter\" implementation of a `Component`\n\t * that can be passed to `<PhoneInput/>`. It parses and formats\n\t * the user's and maintains the caret's position in the process.\n\t * The caret positioning is maintained using `input-format` library.\n\t * Relies on being run in a DOM environment for calling caret positioning functions.\n\t */\n\tfunction InputSmart({\n\t\tcountry,\n\t\tinternational,\n\t\twithCountryCallingCode,\n\t\tmetadata,\n\t\t...rest\n\t}, ref) {\n\t\tconst format = useCallback((value) => {\n\t\t\t// \"As you type\" formatter.\n\t\t\tconst formatter = new AsYouType(country, metadata)\n\t\t\tconst prefix = getInputValuePrefix({\n\t\t\t\tcountry,\n\t\t\t\tinternational,\n\t\t\t\twithCountryCallingCode,\n\t\t\t\tmetadata\n\t\t\t})\n\t\t\t// Format the number.\n\t\t\tlet text = formatter.input(prefix + value)\n\t\t\tlet template = formatter.getTemplate()\n\t\t\tif (prefix) {\n\t\t\t\ttext = removeInputValuePrefix(text, prefix)\n\t\t\t\t// `AsYouType.getTemplate()` can be `undefined`.\n\t\t\t\tif (template) {\n\t\t\t\t\ttemplate = removeInputValuePrefix(template, prefix)\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\ttext,\n\t\t\t\ttemplate\n\t\t\t}\n\t\t}, [country, metadata])\n\t\treturn (\n\t\t\t<Input\n\t\t\t\t{...rest}\n\t\t\t\tref={ref}\n\t\t\t\tparse={parsePhoneNumberCharacter}\n\t\t\t\tformat={format}/>\n\t\t)\n\t}\n\n\tInputSmart = React.forwardRef(InputSmart)\n\n\tInputSmart.propTypes = {\n\t\t/**\n\t\t * The parsed phone number.\n\t\t * \"Parsed\" not in a sense of \"E.164\"\n\t\t * but rather in a sense of \"having only\n\t\t * digits and possibly a leading plus character\".\n\t\t * Examples: `\"\"`, `\"+\"`, `\"+123\"`, `\"123\"`.\n\t\t */\n\t\tvalue: PropTypes.string.isRequired,\n\n\t\t/**\n\t\t * A function of `value: string`.\n\t\t * Updates the `value` property.\n\t\t */\n\t\tonChange: PropTypes.func.isRequired,\n\n\t\t/**\n\t\t * A two-letter country code for formatting `value`\n\t\t * as a national phone number (e.g. `(800) 555 35 35`).\n\t\t * E.g. \"US\", \"RU\", etc.\n\t\t * If no `country` is passed then `value`\n\t\t * is formatted as an international phone number.\n\t\t * (e.g. `+7 800 555 35 35`)\n\t\t * Perhaps the `country` property should have been called `defaultCountry`\n\t\t * because if `value` is an international number then `country` is ignored.\n\t\t */\n\t\tcountry: PropTypes.string,\n\n\t\t/**\n\t\t * If `country` property is passed along with `international={true}` property\n\t\t * then the phone number will be input in \"international\" format for that `country`\n\t\t * (without \"country calling code\").\n\t\t * For example, if `country=\"US\"` property is passed to \"without country select\" input\n\t\t * then the phone number will be input in the \"national\" format for `US` (`(213) 373-4253`).\n\t\t * But if both `country=\"US\"` and `international={true}` properties are passed then\n\t\t * the phone number will be input in the \"international\" format for `US` (`213 373 4253`)\n\t\t * (without \"country calling code\" `+1`).\n\t\t */\n\t\tinternational: PropTypes.bool,\n\n\t\t/**\n\t\t * If `country` and `international` properties are set,\n\t\t * then by default it won't include \"country calling code\" in the input field.\n\t\t * To change that, pass `withCountryCallingCode` property,\n\t\t * and it will include \"country calling code\" in the input field.\n\t\t */\n\t\twithCountryCallingCode: PropTypes.bool,\n\n\t\t/**\n\t\t * `libphonenumber-js` metadata.\n\t\t */\n\t\tmetadata: PropTypes.object.isRequired\n\t}\n\n\tInputSmart.defaultProps = {\n\t\tmetadata: defaultMetadata\n\t}\n\n\treturn InputSmart\n}\n\nexport default createInput()"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,QAAmC,OAAnC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,SAASC,SAAT,EAAoBC,yBAApB,QAAqD,wBAArD;AAEA,SAASC,mBAAT,EAA8BC,sBAA9B,QAA4D,4BAA5D;AAEA,OAAO,SAASC,WAATA,CAAqBC,eAArB,EACP;EACC;;;;;;;EAOA,SAASC,UAATA,CAAAC,IAAA,EAMGC,GANH,EAMQ;IAAA,IALPC,OAKO,GAAAF,IAAA,CALPE,OAKO;MAJPC,aAIO,GAAAH,IAAA,CAJPG,aAIO;MAHPC,sBAGO,GAAAJ,IAAA,CAHPI,sBAGO;MAFPC,QAEO,GAAAL,IAAA,CAFPK,QAEO;MADJC,IACI,GAAAC,wBAAA,CAAAP,IAAA;IACP,IAAMQ,MAAM,GAAGlB,WAAW,CAAC,UAACmB,KAAD,EAAW;MACrC;MACA,IAAMC,SAAS,GAAG,IAAIjB,SAAJ,CAAcS,OAAd,EAAuBG,QAAvB,CAAlB;MACA,IAAMM,MAAM,GAAGhB,mBAAmB,CAAC;QAClCO,OAAO,EAAPA,OADkC;QAElCC,aAAa,EAAbA,aAFkC;QAGlCC,sBAAsB,EAAtBA,sBAHkC;QAIlCC,QAAQ,EAARA;MAJkC,CAAD,CAAlC,CAHqC,CASrC;;MACA,IAAIO,IAAI,GAAGF,SAAS,CAACG,KAAV,CAAgBF,MAAM,GAAGF,KAAzB,CAAX;MACA,IAAIK,QAAQ,GAAGJ,SAAS,CAACK,WAAV,EAAf;MACA,IAAIJ,MAAJ,EAAY;QACXC,IAAI,GAAGhB,sBAAsB,CAACgB,IAAD,EAAOD,MAAP,CAA7B,CADW,CAEX;;QACA,IAAIG,QAAJ,EAAc;UACbA,QAAQ,GAAGlB,sBAAsB,CAACkB,QAAD,EAAWH,MAAX,CAAjC;QACA;MACD;MACD,OAAO;QACNC,IAAI,EAAJA,IADM;QAENE,QAAQ,EAARA;MAFM,CAAP;IAIA,CAvByB,EAuBvB,CAACZ,OAAD,EAAUG,QAAV,CAvBuB,CAA1B;IAwBA,OACChB,KAAA,CAAA2B,aAAA,CAACxB,KAAD,EAAAyB,QAAA,KACKX,IADL;MAECL,GAAG,EAAEA,GAFN;MAGCiB,KAAK,EAAExB,yBAHR;MAICc,MAAM,EAAEA;IAJT,GADD;EAOA;EAEDT,UAAU,GAAGV,KAAK,CAAC8B,UAAN,CAAiBpB,UAAjB,CAAb;EAEAA,UAAU,CAACqB,SAAX,GAAuB;IACtB;;;;;;;IAOAX,KAAK,EAAElB,SAAS,CAAC8B,MAAV,CAAiBC,UARF;IAUtB;;;;IAIAC,QAAQ,EAAEhC,SAAS,CAACiC,IAAV,CAAeF,UAdH;IAgBtB;;;;;;;;;;IAUApB,OAAO,EAAEX,SAAS,CAAC8B,MA1BG;IA4BtB;;;;;;;;;;IAUAlB,aAAa,EAAEZ,SAAS,CAACkC,IAtCH;IAwCtB;;;;;;IAMArB,sBAAsB,EAAEb,SAAS,CAACkC,IA9CZ;IAgDtB;;;IAGApB,QAAQ,EAAEd,SAAS,CAACmC,MAAV,CAAiBJ;EAnDL,CAAvB;EAsDAvB,UAAU,CAAC4B,YAAX,GAA0B;IACzBtB,QAAQ,EAAEP;EADe,CAA1B;EAIA,OAAOC,UAAP;AACA;AAED,eAAeF,WAAW,EAA1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}